[{"authors":null,"categories":null,"content":"My legal name is Junhyung Kim (김준형), but I usually go by Lyle. I am a fifth year Ph.D. student in Computer Science at Rice University, advised by Prof. Anastasios Kyrillidis. I also work closely with Prof. César A. Uribe and Prof. Nai-Hui Chia.\nBefore joining Rice, I was a research professional at the University of Chicago Booth School of Business supervised by Prof. Panos Toulis.\nI received bachelor\u0026rsquo;s degrees in Mathematics and Statistics at the University of Chicago in 2017. During my senior year at the college, I also worked with Prof. Mikael Kuusela under the supervision of Prof. Michael L. Stein.\nIn summer 2023, I worked as a visitng student researcher at MILA \u0026ndash; Quebec Artificial Intelligence Institute under the supervision of Prof. Gauthier Gidel and Prof. Ioannis Mitliagkas.\nIn summer 2022, I worked at Meta (Fundamental AI Research) as a research intern under the supervision of Dr. Aaron Defazio.\n  Here is my CV, and  Google Scholar.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://jlylekim.github.io/author/j.-lyle-kim/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/j.-lyle-kim/","section":"authors","summary":"My legal name is Junhyung Kim (김준형), but I usually go by Lyle. I am a fifth year Ph.D. student in Computer Science at Rice","tags":null,"title":"J. Lyle Kim","type":"authors"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://jlylekim.github.io/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"https://jlylekim.github.io/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"https://jlylekim.github.io/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://jlylekim.github.io/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["Fangshuo Liao","**Junhyung Lyle Kim**","Cruz Barnum","Anastasios Kyrillidis"],"categories":["principal component analysis","inexact deflation","power iteration"],"content":"","date":1714521600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714521600,"objectID":"958a8c7ab298037453c374977eb83820","permalink":"https://jlylekim.github.io/publication/conference-paper/pca-deflation-icml2024/","publishdate":"2024-05-01T00:00:00Z","relpermalink":"/publication/conference-paper/pca-deflation-icml2024/","section":"publication","summary":" ","tags":["principal component analysis","inexact deflation","power iteration"],"title":"On the Error-Propagation of Inexact Deflation for Principal Component Analysis","type":"publication"},{"authors":["Cameron Wolfe","Fangshuo Liao","Qihan Wang","**Junhyung Lyle Kim**","Anastasios Kyrillidis"],"categories":["lotterty ticket hypothesis","frank-wolfe algorithm","machine learning"],"content":"","date":1706227200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1706227200,"objectID":"b72901b31c8b1ae9a891fbc195bbb972","permalink":"https://jlylekim.github.io/publication/journal-article/provable-lottery-ticket-2024/","publishdate":"2024-01-26T00:00:00Z","relpermalink":"/publication/journal-article/provable-lottery-ticket-2024/","section":"publication","summary":" ","tags":["lotterty ticket hypothesis","frank-wolfe algorithm","machine learning"],"title":"How Much Pre-training Is Enough to Discover a Good Subnetwork?","type":"publication"},{"authors":["**Junhyung Lyle Kim**","Mohammad Taha Toghani","César A. Uribe","Anastasios Kyrillidis"],"categories":["federated learning","distributed optimization","adaptive method"],"content":"","date":1704067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704067200,"objectID":"396ac9dce63a16047189113fb3a44088","permalink":"https://jlylekim.github.io/publication/conference-paper/adaptive-fl-iclr2024/","publishdate":"2024-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/adaptive-fl-iclr2024/","section":"publication","summary":" ","tags":["federated learning","distributed optimization","adaptive method"],"title":"Adaptive Federated Learning with Auto-Tuned Clients","type":"publication"},{"authors":["**Junhyung Lyle Kim**","Gauthier Gidel","Anastasios Kyrillidis","Fabian Pedregosa"],"categories":["differentiable game","extragradient","acceleration","Chebyshev polynomials"],"content":"","date":1704067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1704067200,"objectID":"fa599f8b40487c4568bba9246e7f129e","permalink":"https://jlylekim.github.io/publication/journal-article/momentum-extragradient-2024/","publishdate":"2024-01-01T00:00:00Z","relpermalink":"/publication/journal-article/momentum-extragradient-2024/","section":"publication","summary":" ","tags":["differentiable game","extragradient","acceleration","Chebyshev polynomials"],"title":"When is Momentum Extragradient Optimal? A Polynomial-Based Analysis","type":"publication"},{"authors":null,"categories":null,"content":"\r[01 May 2024] Our paper On the Error-Propagation of Inexact Deflation for Principal Component Analysis has been accepted at ICML 2024. Congratulations to all the co-authors!\n[26 Jan 2024] Our paper How Much Pre-training Is Enough to Discover a Good Subnetwork? has been accepted at the Transactions on Machine Learning Research (TMLR). Congratulations to all the co-authors!\n[16 Jan 2024] Our paper Adaptive Federated Learning with Auto-Tuned Clients has been accepted at the International Conference on Learning Representations (ICLR), 2024. This is joint work with M. Taha Toghani, Prof. César A. Uribe, and Prof. Tasos Kyrillidis.\n[12 Dec 2023] Our paper When is Momentum Extragradient Optimal? A Polynomial-Based Analysis has been accepted at Transactions on Machine Learning Research (TMLR). This is joint work with Prof. Gauthier Gidel, Prof. Tasos Kyrillidis, and Dr. Fabian Pedregosa.\n[27 Oct 2023] I co-organized Quantum Information Processing Systems (QuantIPS 2023). Thank you to all the speakers and participants!\n[29 Sep 2023] I co-organized Texas Colloquium on Distributed Learning (TL;DR 2023). Thank you to all the speakers and participants!\n[19 June 2023] Adaptive Federated Learning with Auto-Tuned Clients via Local Smoothness got accepted at ICML 2023 Federated Learning Workshop. My poster is available here.\n[08 May 2023] I started my summer research visit at MILA under the supervision of Prof. Ioannis Mitliagkas and Prof. Gauthier Gidel.\n[20 Apr 2023] I completed my PhD Proposal. Committee: Profs. Anastasios Kyrillidis (chair), César A. Uribe, and Nai-Hui Chia.\n[07 Feb 2023] I presented Fast Quantum State Tomography via Accelerated Non-convex Programming and Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography at Quantum Information Processing 2023 as poster presentations.\n[06 Feb 2023] I was selected as a top reviewer (top-10%) for AISTATS 2023.\n[19 Jan 2023] Our paper Fast Quantum State Tomography via Accelerated Non-convex Programming has been accepted at Photonics 2023. A relevant blog post can be found here. This work was also featured in this article.\n[08 Dec 2022] I presented Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography at CDC 2022.\n[03 Dec 2022] I presented Momentum Extragradient is Optimal for Games with Cross-Shaped Jacobian Spectrum at NeurIPS 2022 Workshop on Optimization for Machine Learning.\n[24 Nov 2022] Our paper Fast Quantum State Tomography via Accelerated Non-convex Programming and Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography have been accepted at Quantum Information Processing 2023 for poster presentations.\n[20 Oct 2022] Our paper Momentum Extragradient is Optimal for Games with Cross-Shaped Jacobian Spectrum has been accepted at NeurIPS 2022 Workshop on Optimization for Machine Learning.\n[28 Jul 2022] I presented Convergence and Stability of the Stochastic Proximal Point Algorithm with Momentum at INFORMS 2022.\n[28 Jul 2022] I presented Convergence and Stability of the Stochastic Proximal Point Algorithm with Momentum at ICCOPT 2022.\n[09 Jun 2022] Our paper Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography has been accepted at the IEEE Control Systems Letters (L-CSS), 2022. This is joint work with M. Taha Toghani, Prof. César A. Uribe, and Prof. Tasos Kyrillidis.\n[09 May 2022] I started my research intenship at Meta (FAIR) under the supervision of Dr. Aaron Defazio.\n[23 Mar 2022] Our new paper Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography is available on arXiv. This is joint work with M. Taha Toghani, Prof. César A. Uribe, and Prof. Tasos Kyrillidis.\n[01 Mar 2022] Our paper Convergence and Stability of the Stochastic Proximal Point Algorithm with Momentum has been accepted at Learning for Dynamics and Control (L4DC) 2022.\n[27 Oct 2021] I presented Fast Quantum State Tomography via Accelerated Non-convex Programming at INFORMS 2021.\n[20 Oct 2021] Our paper Acceleration and Stability of the Stochastic Proximal Point Algorithm has been accepted for a spotlight presentation at NeurIPS 2021 Workshop on Optimization for Machine Learning.\n[24 Jul 2021] I am co-organizing a workshop Beyond first-order methods in ML systems in ICML 2021. (Co-organizers: Albert S. Berahas, Raghu Bollapragada, Rixon Crane, Amir Gholami, Anastasios Kyrillidis, Michael Mahoney, Fred Roosta, and Rachael Tappenden).\n[15 Apr 2021] I passed my qualification exam (research project defense). Committee: Profs. Anastasios Kyrillidis (chair), Santiago Segarra, and Richard Baraniuk.\n[14 Apr 2021] Our paper Fast Quantum State Tomography via Accelerated Non-convex Programming is on arXiv. A relevant blog post can be found here. This work was also featured in this article.\n[01 Dec 2019] I officially joined OptimaLab led by Prof. Anastasios Kyrillidis.\n[25 Aug 2019] I started my Ph.D. studies in Computer Science at Rice University.\n","date":1701388800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701388800,"objectID":"f16fbd58616139583332c38b045fa1a7","permalink":"https://jlylekim.github.io/news/news/","publishdate":"2023-12-01T00:00:00Z","relpermalink":"/news/news/","section":"news","summary":"List of news.\n","tags":[],"title":"News","type":"news"},{"authors":["**Junhyung Lyle Kim**","Mohammad Taha Toghani","César A. Uribe","Anastasios Kyrillidis"],"categories":["federated learning","adaptive optimization","local smoothness"],"content":"","date":1688169600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1688169600,"objectID":"b3fa9d8d4a22fdb56becc46b0c199bce","permalink":"https://jlylekim.github.io/publication/conference-paper/adaptive-fl-icml2023-workshop/","publishdate":"2023-07-01T00:00:00Z","relpermalink":"/publication/conference-paper/adaptive-fl-icml2023-workshop/","section":"publication","summary":" ","tags":["federated learning","adaptive optimization","local smoothness"],"title":"Adaptive Federated Learning with Auto-Tuned Clients via Local Smoothness","type":"publication"},{"authors":["J. Lyle Kim"],"categories":["distributed optimization","low-rank factorization","local updates","quantum computing"],"content":"This blog post is about my recent work on distributed quantum state tomography using local stochastic factored gradient descent,1 published in Control System Letters, IEEE 2023. This is a joint work with my advisors Prof. Tasos Kyrillidis and Prof. Cesar A. Uribe, and my good friend Taha Toghani.\nIntroduction Quantum state tomography (QST) is one of the main procedures to identify the nature of imperfections in quantum processing unit (QPU) implementation. For more detailed background on QST, please refer to my previous blog post.\nGiven the previous blogpost, we will jump directly to the objective function. We again use low-rankness as our prior. That is, we consider the reconstruction of a low-rank density matrix $\\rho^\\star \\in \\mathbb{C}^{d \\times d}$ on a $n$-qubit Hilbert space, where $d=2^n$, through the following $\\ell_2$-norm reconstruction objective: \\begin{align} \\label{eq:objective} \\tag{1} \\min_{\\rho \\in \\mathbb{C}^{d \\times d}} \\quad \u0026amp; f(\\rho) := \\tfrac{1}{2} ||\\mathcal{A}(\\rho) - y||_2^2 \\\\\n\\text{subject to} \\quad\u0026amp; \\rho \\succeq 0, ~\\texttt{rank}(\\rho) \\leq r. \\end{align}\nHere, $y \\in \\mathbb{R}^m$ is the measured data through quantum computer or simulation, and $\\mathcal{A}(\\cdot): \\mathbb{C}^{d \\times d} \\rightarrow \\mathbb{R}^m$ is the linear sensing map. The sensing map relates the density matrix $\\rho$ to the measurements through Born rule: $\\left( \\mathcal{A}(\\rho) \\right)_i = \\text{Tr}(A_i \\rho),$ where $A_i \\in \\mathbb{C}^{d \\times d},~i=1, \\dots, m$ are the sensing matrices.\nOne of the motivation for using the low-rank prior is that the sample complexity can be reduced to $O(r \\cdot d \\cdot \\text{poly} \\log d)$ from $O(d^2)$.2 However, low-rank constraint is a non-convex constraint, which is tricky to handle. To solve \\eqref{eq:objective} as is using iterative methods like gradient descent, one needs to perform singular value decomposition on every iteration (in order to project onto the low-rank and PSD subspace), which is prohibitively expensive when $d$ is large, which is almost always the case as $d = 2^n$.\nTo address that, instead of solving \\eqref{eq:objective}, we proposed to solve a factorized version of it, following recent work 3: \\begin{align} \\label{eq:factored-obj} \\tag{2} \\min_{U \\in \\mathbb{C}^{d \\times r}} f(UU^\\dagger) := \\tfrac{1}{2} || \\mathcal{A} (UU^\\dagger) - y ||_2^2, \\end{align} where $U^\\dagger$ denotes the adjoint of $U$. Now, \\eqref{eq:factored-obj} is an unconstrained problem, and we can use gradient descent on $U$, which iterates as follows:\n\\begin{align*} \\label{eq:fgd} \\tag{3} U_{i+1} \u0026amp;= U_{i} - \\eta \\nabla F(U_k U_k^\\dagger) \\cdot U_k \\\\\n\u0026amp;= U_k - \\eta \\left( \\frac{1}{m} \\sum_{i=1}^m ( \\text{Tr}(A_k U_k U_t^\\dagger) - y_k ) A_k \\right) \\cdot U_k \\end{align*}\nEven though \\eqref{eq:factored-obj} is unconstrained and thus we can avoid performing the expensive singular value decomposition on every iteration, $m$ in \\eqref{eq:fgd} is still extremely large. In particular, with $r=100$ and $n=30$, the reduced sample complexity still reaches $O\\left(r \\cdot d \\cdot \\text{poly}(\\log d)\\right) \\approx 9.65 \\times 10^{14}$.\nDistributed objective To handle such explosion of data, We consider the setting where the measurements $y \\in \\mathbb{R}^m$ and the sensing matrices $\\mathcal{A}: \\mathbb{C}^{d\\times d} \\rightarrow \\mathbb{R}^m$ from a central quantum computer are locally stored across $M$ different classical machines. These classical machines perform some local operations based on their local data, and communicate back and forth with the central quantum server. Mathematically, we can write the distributed objective as: \\begin{align} \\label{eq:dist-obj} \\tag{4} \\min_{U \\in \\mathbb{C}^{d \\times r}} g(U) \u0026amp;= \\frac{1}{M} \\sum_{i=1}^M g_i(U), \\\\\n\\text{where} \\quad g_i(U) \u0026amp;:= \\mathbb{E}_{j \\sim \\mathcal{D}_i} ||\\mathcal{A}_i^j (UU^\\dagger) - y_i^j ||_2^2. \\end{align}\nWe illustrate the above objective with the figure bellow:   Illustration of distributed quantum state tomography.   That is, $i$-th machine has sensing matrices $\\mathcal{A}_i: \\mathbb{C}^{d\\times d} \\rightarrow \\mathbb{R}^{m_i}$ and measurement data $y_i \\in \\mathbb{R}^{m_i}$, such that the collection of $\\mathcal{A}_i$ and $y_i$ for $i \\in [M]$ recover the original $\\mathcal{A}$ and $y$.\nDistributed algorithm A naive way to implement a distributed algorithm to solve \\eqref{eq:dist-obj} is as follows:\n Each machine can take a (stochastic) gradient step: \\begin{align} U_k^i = U_{k-1}^i - \\eta_{t-1} \\nabla g_i^{j_{t-1}} (U_{t-1}^i) \\end{align} Central quantum server receives next iterate for all $i$ and take average: \\begin{align} U_k^i = U_{k-1}^i - \\eta_{t-1} \\nabla g_i^{j_{t-1}} (U_{t-1}^i) \\end{align}  However, such intra-node communication is much more \u0026mdash;typically 3-4 order of magnitude more\u0026mdash; expensive than inter-node computation.4 Therefore, it\u0026rsquo;s desirable to communicate as little as possible. One way to do so is by performing local iterations on each machine, and communicate only once in a while. We propose the Local Stochastic Factored Gradient Descent (Local SFGD) in the below pseudocode:\n  Pseudocode for Local Stochastic Factored Gradient Descent (Local SFGD).   The initialization scheme in line 1 (or Eq. (7)) is an adaptation of Theorem 115 to the distributed setting, and is crucial in theory to prove global convergence (however, in practice, we observe thant random intialization also works well). Also notice that there are some pre-defined synchronization (or communication) steps $t_p$, for some $p \\in \\mathbb{N}$. The algorithm proceeds by, at each time step $t$, a stochastic FGD step is taken in parallel for each machine. Only if the time step equals a pre-defined synchronization step, the local iterates are sent to the server and their average is computed. The average is fed back to each machine, and the process repeats until the time step reaches user-input $T$.\nTheoretical guarantees We will not get into the details of the theoretical guarantees of Local SFGD in this post. Please refer to the paper for more detailed discussion.\nThat being said, we first introduce the assumptions on the function class and on the stochastic gradients:   Assumptions 1 and 2   Assumption 1 is the standard strong-convexity and $L$-smoothness assumptions, but are restricted (i.e., weaker) in the sense that they only need to hold for PSD matrices. Assumption 2 is quite standard on stochastic-optimization literature.\nBased on the above assumptions, we prove two results: local linear convergence with a constant step-size (Theorem 2), and local sub-linear conveergence with diminishing step-sizes (Theorem 4). Here, \u0026ldquo;local convergence\u0026rdquo; means that the convergence depends on the initialization.\n  Local linear convergence with a constant step size   Some remarks to make:\n the last variance term, $\\frac{\\sigma^2}{M \\alpha}$, also shows up in the convergence analysis of SFGD is reduced by the number of machines $M$; we assume a single-batch is used in the proof; by using batch size $b \u0026gt; 1$, this term can be further divided by $b$; by plugging in $h = 1$ (i.e., synchronization happens on every iteration), the first variance term disappears, exhibiting similar local linear convergence to SFGD.6    Local sublinear convergence with diminishing step sizes   The main message of Theorem 4 is that, by using appropriately diminishing step-sizes, we can achieve local convergence (without any variance term), at the cost of slowing down the convergence rate to a sub-linear one.\nNumerical simulations We use the Local SFGD to reconstruct the Greenberger-Horne-Zeilinger (GHZ) state, using simulated measurement data from Qiskit. GHZ state is known as maximally entangled quantum state, meaning that it exhibits the maximal inter-particle correlation, which does not exist in the classical mechanics. We are interested in: $(i)$ how the number of local steps affect the accuracy defined as $ \\varepsilon = || \\hat{U}_t \\hat{U}_t^\\top - \\rho^\\star ||_F^2,$ where $\\rho^\\star = U^\\star U^{\\star \\dagger}$ is the true density matrix for the GHZ state; and $(ii)$ the scalability of the distributed setup for various number of classical machines $M$.\n  Local sublinear convergence with diminishing step sizes   In the top panel of the above plot, we first fix the number of machines $M = 10$ and the number of total synchronization steps to be $100$, and vary the number of local iterations between two synchronization steps, i.e., $h \\in {1, 10, 25, 50, 100, 200}.$ We use constant step size $\\eta=1$ for all $h$.\nIncreasing $h$, i.e., each distributed machine performing more local iterations, leads to faster convergence in terms of the synchronization steps. Notably, the speed up gets marginal: e.g., there is not much difference between $h=100$ and $h=200$, indicating there is an ``optimal'' $h$ that leads to the biggest reduction in the number of synchronization steps. Finally, note that $\\varepsilon$ does not decrease below certain level due to the inherent finite sampling error of quantum measurements.\nIn the bottom panel, we plot the number of synchronization steps to reach $\\varepsilon \\leq 0.05,$ while fixing % the number of local iterations, i.e., $h=20$. We vary the number of workers $M \\in {5, 10, 15, 20}$, where each machine gets $200$ measurements. There is a significant speed up from $M=5$ to $M=15$, while for $M=20,$ it took one more syncrhonization step compared to $M=15,$ which is likely due to the stochasticity of SFGD within each machine.\n  J. L. Kim, M. T. Toghani, C. A. Uribe and A. Kyrillidis. Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography. IEEE Control Systems Letters, vol. 7, pp. 199-204, 2023. \u0026#x21a9;\u0026#xfe0e;\n D. Gross, Y.-K. Liu, S. Flammia, S. Becker, and J. Eisert. Quantum state tomography via compressed sensing. Physical review letters, 105(15):150401, 2010. \u0026#x21a9;\u0026#xfe0e;\n A. Kyrillidis, A. Kalev, D. Park, S. Bhojanapalli, C. Caramanis, and S. Sanghavi. Provable quantum state tomography via non-convex methods. npj Quantum Information, 4(36), 2018. \u0026#x21a9;\u0026#xfe0e;\n Guanghui Lan, Soomin Lee, and Yi Zhou. Communication-efficient algorithms for decentralized and stochastic optimization. Mathematical Programming 180.1-2. 237-284. 2020. \u0026#x21a9;\u0026#xfe0e;\n S. Bhojanapalli, A. Kyrillidis, S. Sanghavi. Dropping Convexity for Faster Semi-definite Optimization. 29th Annual Conference on Learning Theory, in Proceedings of Machine Learning Research. 49:530-582. 2016. \u0026#x21a9;\u0026#xfe0e;\n J. Zeng, K. Ma, and Y. Yao. \u0026ldquo;On global linear convergence in stochastic nonconvex optimization for semidefinite programming.\u0026rdquo; IEEE Transactions on Signal Processing 67.16. 4261-4275. 2019, \u0026#x21a9;\u0026#xfe0e;\n   ","date":1677024000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677024000,"objectID":"e1546ba67ea94e9cbbf9900fd365d4d7","permalink":"https://jlylekim.github.io/blog/local-sfgd/","publishdate":"2023-02-22T00:00:00Z","relpermalink":"/blog/local-sfgd/","section":"blog","summary":"Read more","tags":["distributed optimization","low-rank factorization","local updates","quantum computing"],"title":"Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography","type":"blog"},{"authors":["**Junhyung Lyle Kim**","George Kollias","Amir Kalev","Ken X. Wei","Anastasios Kyrillidis"],"categories":["non-convex optimization","low-rank factorization","acceleration","quantum computing"],"content":"","date":1672531200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1672531200,"objectID":"d825773437b775f936514e9cb3e16caf","permalink":"https://jlylekim.github.io/publication/journal-article/mifgd-2021/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/mifgd-2021/","section":"publication","summary":" ","tags":["non-convex optimization","low-rank factorization","acceleration","quantum computing"],"title":"Fast Quantum State Tomography via Accelerated Non-convex Programming","type":"publication"},{"authors":["**Junhyung Lyle Kim**","Gauthier Gidel","Anastasios Kyrillidis","Fabian Pedregosa"],"categories":["differentiable game","extragradient","acceleration","Chebyshev polynomials"],"content":"","date":1667260800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667260800,"objectID":"fedace7fe5cc5f96103b168db5b72c4c","permalink":"https://jlylekim.github.io/publication/conference-paper/respoly-exstragradient-opt2022/","publishdate":"2022-11-01T00:00:00Z","relpermalink":"/publication/conference-paper/respoly-exstragradient-opt2022/","section":"publication","summary":" ","tags":["differentiable game","extragradient","acceleration","Chebyshev polynomials"],"title":"Momentum Extragradient is Optimal for Games with Cross-Shaped Spectrum","type":"publication"},{"authors":["J. Lyle Kim"],"categories":["convex optimization","acceleration","proximal point algorithm"],"content":"Introduction In this blog post, I will introduce the stochastic proximal point algorithm with momentum (SPPAM) based on this paper,1 which is forthcoming in Learning for Dynamics and Control (L4DC) 2022.\nBackground We focus on unconstrained empirical risk minimization: \\begin{align} \\label{eq:obj} \\tag{1} \\min_{x \\in \\mathbb{R}^p} ~f(x) = \\frac{1}{n} \\sum_{i=1}^n f_i(x). \\end{align}\nStochastic gradient descent (SGD) has become the de facto method to solve \\eqref{eq:obj} used by the machine learning community, mainly due to its computational efficiency. SGD iterates as follows: \\begin{align} \\label{eq:sgd} \\tag{2} x_{t+1} = x_t - \\eta \\nabla f_{i_t}(x_t), \\end{align} where $\\eta$ is the step size, and $\\nabla f_i$ is the (stochastic) gradient computed at the $i$-th data point.\nWhile computationally efficient, SGD in \\eqref{eq:sgd} suffers from two major limitations: $(i)$ slow convergence, and $(ii)$ numerical instability. Due to the (stochastic) gradient noise, SGD could take longer to converge in terms of iterations. Moreover, SGD suffers from numerical instabilities both in theory and practice, allowing only a small range of $\\eta$ values that lead to convergence, which often depend on unknown quantities. 2 3\nAcceleration via Momentum. With respect to the slow convergence, many variants of accelerated methods have been proposed, including the Polyak\u0026rsquo;s momentum 4 and the Nesterov\u0026rsquo;s acceleration 5 methods. These methods allow faster (sometimes optimal) convergence rates, while having virtually the same computational cost as SGD. In particular, SGD with momentum (SGDM) iterates as follows: \\begin{align} \\label{eq:sgdm} \\tag{3} x_{t+1} = x_t - \\eta \\nabla f_{i_t}(x_t) + \\beta (x_t - x_{t-1}), \\end{align} where $\\beta \\in [0,1)$ is the momentum parameter. The intuition is that, if the direction from $x_{t-1}$ to $x_t$ was \u0026ldquo;correct,\u0026rdquo; then SGDM utilizes this inertia weighted by the momentum parameter $\\beta,$ instead of just relying on the current point $x_t.$\nYet, SGDM could be hard to tune: SGDM adds another hyperparameter\u0026mdash;momentum $\\beta$\u0026mdash;to an already sensitive stochastic procedure of SGD. As such, various works have found that such motions could aggravate the instability of SGD. 6 7 8\nStability via Proximal Updates. With respect to the numerical stability, variants of SGD that utilize proximal updates have recently been proposed. The proximal point algorithm (PPA) obtains the next iterate for minimizing $f$ by solving the following optimization problem: \\begin{align} \\label{eq:ppa} \\tag{6} x_{t+1} = \\arg \\min_{x\\in \\mathbb{R}^p} \\left\\{ f(x) + \\tfrac{1}{2\\eta} || x - x_t ||_2^2 \\right\\}, \\end{align} which is equivalent to implicit gradient descent (IGD) by the first-order optimality condition: \\begin{align} \\label{eq:igd} \\tag{7} x_{t+1} = x_t - \\eta \\nabla f(x_{t+1}). \\end{align} In words, instead of minimizing $f$ directly, PPA minimizes $f$ with an additional quadratic term. This small change brings a major advantage to PPA: if $f$ is convex, the added quadratic term can make the problem strongly convex; if $f$ is non-convex, PPA can make it convex.\nThanks to this conditioning property, PPA exhibits different behavior compared to GD in the deterministic setting. For a convex function $f$, PPA satisfies: 9 \\begin{align} \\label{eq:ppm-conv-rate-guller} \\tag{8} f(x_T) - f(x^\\star) \\leq O \\left( \\tfrac{1}{\\sum_{t=1}^T \\eta_t} \\right),\n\\end{align} after $T$ iterations. By setting the step size $\\eta_t$ to be large, PPA can converge ``arbitrarily'' fast.\nDue to this remarkable property, PPA was soon considered in the stochastic setting, dubbed as stochastic proximal iterations (SPI) 10 11 or implicit SGD 12 13. These works generally indicate that, in the asymptotic regime, SGD and SPI/ISGD have the same convergence behavior; but in the non-asymptotic regime, SPI/ISGD outperforms SGD due to numerical stability provided by utilizing proximal updates.\nOur Approach: Stochastic PPA with Momentum (SPPAM). The main question we wanted to answer in this work was as follows: $$\\text{Can we accelerate stochastic PPA while preserving its numerical stability?}$$\nSPPAM iterates as follows: \\begin{align} x_{t+1} \u0026amp;= x_t - \\eta \\left (\\nabla f(x_{t+1}) + \\varepsilon_{t+1}\\right) + \\beta (x_t - x_{t-1}) \\label{eq:acc-stoc-ppa}. \\tag{5} \\end{align}\n  Summary of related works   -- Apart from the similarity between SPPAM in \\eqref{eq:acc-stoc-ppa} and SGDM in \\eqref{eq:sgdm}, SPPAM shares the same geometric intuition as Polyak\u0026rsquo;s momentum for SGDM. Disregarding the stochastic errors, the update in \\eqref{eq:acc-stoc-ppa} follows from the solution of: \\begin{align*} \\arg \\min_{x \\in \\mathbb{R}^p} \\left\\{ f(x) + \\tfrac{1}{2\\eta} ||x-x_t||_2^2 - \\tfrac{\\beta}{\\eta} \\langle x_t - x_{t-1}, x \\rangle \\right\\}. \\end{align*}\nWe can get a sense of the behavior of SPPAM from this expression. First, for large $\\eta$, the algorithm is minimizing the original $f.$ For small $\\eta$, the algorithm not only tries to stay local by minimizing the quadratic term, but also tries to minimize $-\\frac{\\beta}{\\eta} \\langle x_t - x_{t-1}, x \\rangle$. By the definition of inner product, this means that $x$, on top of minimizing $f$ and staying close to $x_t$, also tries to move along the direction from $x_{t-1}$ to $x_t$. This intuition aligns with that of Polyak\u0026rsquo;s momentum.\nThe quadratic model case For simplicity, we first consider the convex quadratic optimization problem under the deterministic setting. Specifically, we consider the objective function: \\begin{align} \\label{eq:obj-quad} \\tag{10} f(x) = \\frac{1}{2} x^\\top A x - b^\\top x, \\end{align} where $A \\in \\mathbb{R}^{p\\times p}$ is positive semi-definite with eigenvalues $\\left[ \\lambda_1, \\dots, \\lambda_p \\right]$. Under this scenario, we can study how the step size $\\eta$ and the momentum $\\beta$ affect each other, by deriving exact conditions that lead to convergence for each algorithm. The comparison list includes gradient descent (GD), gradient descent with momentum (GDM), the PPA, and PPA with momentum (PPAM).\nProposition 1 (GD)14 To minimize \\eqref{eq:obj-quad} with gradient descent, the step size $\\eta$ needs to satisfy $0 \u0026lt; \\eta \u0026lt; \\frac{2}{\\lambda_i}~~\\forall i$, where $\\lambda_i$ is the $i$-th eigenvalue of $A$.\nProposition 2 (PPA)1 To minimize \\eqref{eq:obj-quad} with PPA, the step size $\\eta$ needs to satisfy $\\left| \\frac{1}{1+\\eta \\lambda_i} \\right| \u0026lt; 1~~\\forall i$.\nProposition 3 (GDM)14 To minimize \\eqref{eq:obj-quad} with gradient descent with momentum, the step size $\\eta$ needs to satisfy $0 \u0026lt; \\eta \\lambda_i \u0026lt; 2 + 2\\beta$ ~ $\\forall i$, where $0 \\leq \\beta \u0026lt; 1.$\nProposition 4 (PPAM)1 Let $\\delta_i = \\left( \\frac{\\beta+1}{1+\\eta \\lambda_i} \\right)^2 - \\frac{4\\beta}{1+\\eta \\lambda_i}.$ To minimize \\eqref{eq:obj-quad} with PPAM, the step size $\\eta$ and momentum $\\beta$ need to satisfy $~\\forall i$:\n $\\eta \u0026gt; \\frac{\\beta-1}{\\lambda_i},\\quad$ if $\\delta_i \\leq 0$; $\\frac{\\beta+1}{1+\\eta \\lambda_i} + \\sqrt{\\delta_i} \u0026lt; 2,\\quad$ if $\\delta_i \u0026gt; 0$ and $\\frac{\\beta+1}{1+\\eta \\lambda_i} \\geq 0$; $\\frac{\\beta+1}{1+\\eta \\lambda_i} - \\sqrt{\\delta_i} \u0026gt; -2,\\quad$ otherwise.    We generate $A \\in \\mathbb{R}^{p\\times p}$ and $b, x^\\star \\in\\mathbb{R}^p$ from $\\mathcal{N}(0, I)$, where $p=100$ and the condition number of $A$ is 10. We sweep $\\eta$ and $\\beta$ from $-5$ to $5$, with $0.2$ interval. We plot the accuracy $||x_t - x^\\star||_2^2$ after 100 iterations, with the maximum replaced by 10.   Given the above propositions, we can study the stability with respect to the step size $\\eta$ and the momentum $\\beta$ for the considered algorithms. Numerical simulations support the above propositions, and are illustrated in the above figure, matching the theoretical conditions exhibited above.\nIn particular, for GD, only a small range of step sizes $\\eta$ leads to convergence (small white band); this \u0026ldquo;white band\u0026rdquo; corresponds to the restriction that $\\eta$ has to satisfy $\\eta \u0026lt; \\tfrac{2}{\\lambda_i}$ for all $i$. On the other hand, PPA/IGD converges in much wider choices of $\\eta$; this is apparent from Proposition 2, since $\\left| \\frac{1}{1+\\eta \\lambda_i} \\right|$ can be arbitrarily small for larger values of $\\eta$. GDM requires both $\\eta$ and $\\beta$ to be in a small region to converge, following Proposition 3. Finally, PPAM converges in much wider choices of $\\eta$ and $\\beta$; e.g., the conditions in Proposition 4 define different regions of the pair $(\\eta, \\beta)$ that lead to convergence, some of which set both $\\eta$ and $\\beta$ to be negative. Note that the empirical convergence region of PPAM almost exactly matches the theoretical region that leads to convergence in Proposition 4.\nIn the next section, we will see how this pattern translates to a general strongly convex function $f,$ with stochasticity.\nMain Results In this section, we theoretically characterize the convergence and stability behavior of SPPAM.\nWe follow the stochastic errors of PPA, as set up in this paper.13 We can then express \\eqref{eq:acc-stoc-ppa} as: \\begin{align*} x_{t+1}^+ \u0026amp;= x_t - \\eta \\nabla f(x_{t+1}^+) + \\beta (x_t - x_{t-1}) \\\\\nx_{t+1} \u0026amp;= x_{t+1}^+ - \\eta \\varepsilon_{t+1}. \\end{align*}\nNote that $x_{t+1}^+$ is an auxiliary intermediate variable that is used for the analysis only.\nWe further assume the following:\nAssumption 1 $f$ is a $\\mu$-strongly convex function: for some fixed $\\mu \u0026gt; 0$ and for all $x$ and $y$, \\begin{align*} \\langle \\nabla f(x)-\\nabla f(y), x - y \\rangle \\geq \\mu ||x-y ||_2^2. \\end{align*}\nAssumption 2 There exists fixed $\\sigma^2 \u0026gt; 0$ such that, given the natural filtration $\\mathcal{F}_{t-1},$ \\begin{align*} \\mathbb{E}\\left[ \\varepsilon_t \\mid \\mathcal{F}_{t-1} \\right] = 0 \\quad\\text{and}\\quad \\mathbb{E}\\left[ | \\varepsilon_t \\mid \\mathcal{F}_{t-1} |^2 \\right] \\leq \\sigma^2 \\quad\\text{for all}\\quad t. \\end{align*}\nIs SPPAM faster than SPPA? We first study whether SPPAM enjoys faster convergence than SPPA. We start with the iteration invariant bound, which expresses the expected error at $x_{t+1}$ in terms of its previous iterates:\nTheorem 5 For $\\mu$-strongly convex $f(\\cdot)$, SPPAM satisfies the following iteration invariant bound: \\begin{align} \\label{eq:onestep-acc-stoc-prox} \\tag{11} \\mathbb{E} \\big[ || x_{t+1 }- x^\\star ||_2^2 \\big] \u0026amp;\\leq \\tfrac{4}{(1+\\eta \\mu)^2} \\mathbb{E} \\big[ ||x_t - x^\\star ||_2^2 \\big] \\\\\n\u0026amp;\\quad+ \\tfrac{4\\beta^2}{(1+\\eta \\mu)^2\\left( 4-(1+\\beta)^2 \\right)} \\mathbb{E} \\big[ ||x_{t-1} - x^\\star ||_2^2 \\big] + \\eta^2 \\sigma^2. \\end{align}\nNotice that all terms \u0026ndash;except the last one\u0026ndash; are divided by $(1+\\eta \\mu)^2.$ Thus, large step sizes $\\eta$ help convergence (to a neighborhood), reminiscent of the convergence behavior of PPA in \\eqref{eq:ppm-conv-rate-guller}.\nBased on \\eqref{eq:onestep-acc-stoc-prox}, we can write the following $2\\times 2$ system that characterizes the progress of SPPAM: \\begin{align} \\label{eq:two-by-two-onestep} \\tag{12} \\begin{bmatrix} \\mathbb{E} \\big[ ||x_{t+1} - x^\\star ||_2^2 \\big] \\\\\n\\mathbb{E} \\big[ ||x_t - x^\\star ||_2^2 \\big] \\end{bmatrix} \u0026amp;\\leq A \\cdot \\begin{bmatrix} \\mathbb{E} \\big[ ||x_t - x^\\star ||_2^2 \\big] \\\\\n\\mathbb{E} \\big[ ||x_{t-1} - x^\\star ||_2^2 \\big] \\end{bmatrix} + \\begin{bmatrix} \\eta^2 \\sigma^2 \\\\\n0 \\end{bmatrix}, \\end{align}\nwhere $A = \\begin{bmatrix} \\frac{4}{(1+\\eta \\mu)^2} \u0026amp; \\frac{4\\beta^2}{(1+\\eta \\mu)^2\\left( 4-(1+\\beta)^2 \\right)} \\\\\n1 \u0026amp; 0 \\end{bmatrix}$. It is clear that the spectrum of the contraction matrix $A$ determines the convergence rate to a neighborhood. This is summarized in the following lemma:\nLemma 6 The maximum eigenvalue of $A$, which determines the convergence rate of SPPAM, is: \\begin{align} \\label{eq:acc-stoc-ppa-conv-rate} \\tag{13} \\tfrac{2}{(1+\\eta \\mu)^2} + \\sqrt{ \\tfrac{4}{(1+\\eta \\mu)^4} + \\tfrac{4\\beta^2}{(1+\\eta \\mu)^2(4 - (1+\\beta)^2)}}. \\end{align}\nNotice the one-step contraction factor in \\eqref{eq:acc-stoc-ppa-conv-rate} is of order $O(1/\\eta^2),$ exhibiting acceleration compared to that of SPPA for strongly convex objectives: $1/(1+2\\eta \\mu) \\approx O(1/\\eta).$13\nHowever, due to the additional terms, it is not immediately obvious when SPPAM enjoys faster convergence than SPPA. We thus characterize this condition more precisely in the following corollary:\nCorollary 7 For $\\mu$-strongly convex $f$, SPPAM enjoys better contraction factor than SPPA if: \\begin{align*} \\frac{4\\beta^2}{4 - (1+\\beta)^2} \u0026lt; \\frac{\\eta^2 \\mu^2 - 6\\eta\\mu - 3}{(1+\\eta \\mu)^2}. \\end{align*}\nIn words, for a fixed step size $\\eta$ and given a strongly convex parameter $\\mu$, there is a range of momentum parameters $\\beta$ that exhibits acceleration compared to SPPA.\nIn contrast to (stochastic) gradient method analyses in convex optimization, where acceleration is usually shown by improving the dependency on the condition number from $\\kappa = \\tfrac{L}{\\mu}$ to $\\sqrt{\\kappa},$ such a claim can hardly be made for stochastic proximal point methods. This is also the case in deterministic setting, where (Nesterov\u0026rsquo;s) accelerated PPA converges for strongly convex $f$ as in:15 \\begin{align} f(x_T) - f(x^\\star) \\leq O \\left( \\frac{1}{ \\big( \\sum_{t=1}^T \\sqrt{\\eta_t} \\big)^2} \\right), \\label{eq:ppm-acc-conv-rate-guller} \\tag{14} \\end{align} which is faster than the rate in \\eqref{eq:ppm-conv-rate-guller}.\nAs shown in Theorem 5, our convergence analysis of SPPAM does not depend on $L$-smoothness at all. This robustness of SPPAM is also confirmed in numerical simulations in the next section, where SPPAM exhibits the fastest convergence rate, virtually independent of the different settings considered.\nIs SPPAM more stable than SGDM? Theorem 9 For $\\mu$-strongly convex $f$, assume SPPAM is initialized with $x_0 = x_{-1}$. Then, after $T$ iterations, we have: \\begin{align} \\label{eq:Tstep-acc-stoc-prox} \\tag{15} \u0026amp;\\mathbb{E} \\big[ ||x_T - x^\\star ||_2^2 \\big] \\leq \\frac{2 \\sigma_1^T}{\\sigma_1 - \\sigma_2} % \\left( \\left( ||x_0-x^\\star ||_2^2 + \\tfrac{\\eta^2 \\sigma^2}{1-\\theta}\\right) \\cdot (1+\\theta) \\right)\n+ \\frac{\\eta^2 \\sigma^2}{1-\\theta}, \\end{align} where $\\theta=\\frac{4}{(1+\\eta\\mu)^2} + \\tfrac{4\\beta^2}{(1+\\eta\\mu)^2(4-(1+\\beta)^2)}.$\nHere, $\\sigma_{1, 2}$ are the eigenvalues of $A$, and \\begin{align} \\label{eq:discount-init} \\tag{16} \\tfrac{2 \\sigma_1^T}{\\sigma_1 - \\sigma_2} = \\tau^{-1} \\cdot \\left( \\tfrac{2}{(1+\\eta\\mu)^2} + \\tau \\right)^T \\quad \\text{with} \\quad \\tau = \\sqrt{ \\tfrac{4}{(1+\\eta \\mu)^4} + \\tfrac{4\\beta^2}{(1+\\eta \\mu)^2(4 - (1+\\beta)^2)}}. \\end{align}\nThe above theorem states that the term in \\eqref{eq:discount-init} determines the discounting rate of the initial conditions. In particular, the condition that leads to an exponential discount of the initial conditions is characterized by the following theorem:\nTheorem 10 Let the following condition hold: \\begin{align} \\label{eq:init-discount-condition} \\tag{17} % \\left( \\frac{1-\\beta}{1+2 \\eta \\mu} \\right)^2 + \\frac{\\beta^2}{1+2\\eta \\mu} \\left( \\frac{2-\\beta}{2-\\beta(1+\\beta)} \\right) \u0026lt; \\frac{1}{4}. \\tau = \\sqrt{ \\tfrac{4}{(1+\\eta \\mu)^4} + \\tfrac{4\\beta^2}{(1+\\eta \\mu)^2(4 - (1+\\beta)^2)}} \u0026lt; \\tfrac{1}{2}. \\end{align} Then, for $\\mu$-strongly convex $f$, initial conditions of SPPAM exponentially discount: i.e., in \\eqref{eq:Tstep-acc-stoc-prox},\n\\begin{align*} \\tfrac{2 \\sigma_1^T}{\\sigma_1 - \\sigma_2} = \\tau^{-1} \\cdot \\left( \\tfrac{2}{(1+\\eta\\mu)^2} + \\tau \\right)^T =C^T, \\quad\\text{where}\\quad C \\in (0, 1). \\end{align*}\nTo provide more context of the condition in Theorem 10, we make an ``unfair\u0026quot; comparison of \\eqref{eq:init-discount-condition}, which holds for general strongly convex $f,$ to the condition that accelerated SGD requires for strongly convex quadratic objective in \\eqref{eq:obj-quad}.\nThis paper shows that Nesterov\u0026rsquo;s accelerated SGD converges to a neighborhood at a linear rate for strongly convex quadratic objective if $\\max{ \\rho_\\mu(\\eta, \\beta),~\\rho_L(\\eta, \\beta) } \u0026lt; 1$, where $\\rho_\\lambda(\\eta, \\beta)$ for $\\lambda \\in {\\mu, L}$ is defined as: \\begin{align} \\label{eq:sgdm-spectral-rad} \\rho_\\lambda(\\eta, \\beta) = \\begin{cases} \\frac{|(1+\\beta)(1-\\eta \\lambda)|}{2} + \\frac{\\sqrt{\\Delta_\\lambda}}{2} \u0026amp; \\text{if}~\\Delta_\\lambda \\geq 0, \\\n\\sqrt{\\beta (1-\\eta \\lambda)} \u0026amp; \\text{otherwise}, \\end{cases} \\end{align} with $\\Delta_\\lambda = (1+\\beta)^2 (1-\\eta \\lambda)^2 - 4\\beta(1-\\eta \\lambda)$. This condition for convergence can thus be divided into three cases, depending on the range of $\\eta \\lambda$. Define $\\psi_{\\beta, \\eta, \\lambda} = (1 + \\beta)(1 - \\eta \\lambda)$. Then: \\begin{align*} \\begin{cases} \\eta \\lambda \\geq 1, \u0026amp; \\text{Converges if }-\\psi_{\\beta, \\eta, \\lambda} + \\sqrt{\\Delta_\\lambda} \u0026lt; 2, \\\\ \\frac{(1-\\beta)^2}{(1+\\beta)^2} \\leq \\eta \\lambda \u0026lt; 1, \u0026amp; \\text{Always converges}, \\\\\n\\eta \\lambda \u0026lt; \\frac{(1-\\beta)^2}{(1+\\beta)^2}, \u0026amp;\\text{Converges if }\\psi_{\\beta, \\eta, \\lambda} + \\sqrt{\\Delta_\\lambda}\u0026lt; 2 . \\end{cases} \\end{align*}\nNow, consider the standard momentum value $\\beta = 0.9.$ For the first case, the convergence requirement translates to $1 \\leq \\eta \\lambda \\leq \\tfrac{24}{19}.$ The second range is given by $\\frac{1}{361} \\leq \\eta \\lambda \u0026lt; 1$. The third condition is lower bounded by 2 for $\\beta=0.9,$ leading to divergence. Combining, accelerated SGD requires $0.0028 \\approx \\frac{1}{361} \\leq \\eta \\lambda \\leq \\frac{24}{19} \\approx 1.26$ to converge for strongly convex quadratic objectives, set aside that this bound has to satisfy for (unknown) $\\mu$ or $L$. Albeit an unfair comparison, for general strongly convex objective, \\eqref{eq:init-discount-condition} becomes $\\eta \\mu \u0026gt; 4.81$ for $\\beta=0.9.$ Even though $\\mu$ is unknown, one can see this condition is easy to satisfy, by using a sufficiently large step size $\\eta$.\nExperiments In this section, we perform numerical experiments to study the convergence behaviors of SPPAM, SPPA, SGDM, and SGD, using generalized linear models (GLM).\nGLM subsumes a wide family of models including linear, logistic, and Poisson regressions. Different models connects the linear predictor $\\gamma=\\langle a_i, x^\\star \\rangle$ through different \\textit{mean} functions $h(\\cdot)$. We focus on linear and Poisson regression models, where mean functions are defined respectively as $h(\\gamma) = \\gamma$ and $h(\\gamma) = e^\\gamma$. The former is an \u0026ldquo;easy\u0026rdquo; case, where objective is strongly convex, satisfying Assumption 1. The latter is a \u0026ldquo;hard\u0026rdquo; case with non-Lipschitz continuous gradients, where SGD and SGDM are expected to suffer.\n  TOP: Linear regression with condition number $\\kappa \\in {1, 5, 10}$ with gaussian noise level $\\texttt{1e-3}.$ BOTTOM: Poisson regression with condition number $\\kappa \\in {1, 3, 5}$. We set $p = n = 100$ in both cases. Batch size is 10 for all algorithms. The median number of iterations to reach $\\varepsilon = 0.01$ is plotted. Shaded area are the standard deviations across 5 experiments.   In the top row of above figure, we present the results for the linear regression with different condition numbers, with gaussian noise level $\\texttt{1e-3}$. We run each algorithm constant step size $\\eta$ varying from $10^{-3}$ to $10^3$ with $10\\times$ increment, and with $\\beta=0.9$. As expected, SGD and SGDM only converge for specific step size $\\eta$, while SPPA and SPPAM converge for much wider ranges. In terms of convergence rate, SPPAM converges faster than SPPA in all scenarios, which improves or matches the rate of SGDM, when it converges. As $\\kappa$ increases, the range of $\\eta$ that leads to convergence for SGD and SGDM shrinks; notice the sharper \u0026ldquo;$\\lor$\u0026rdquo; shape for SGD and SGDM for $\\kappa = 10$ (3rd), compared to $\\kappa=5$ (2nd) or $\\kappa=1$ (1st). SPPA also slightly slows down as $\\kappa$ increases, while SPPAM converges essentially in the same manner for all scenarios.\nSuch trend is much more pronounced for the Poisson regression case presented in the bottom row. Due to the exponential mean function $h(\\cdot)$ for Poisson model, the outcomes are extremely sensitive, and its likelihood does not satisfy standard assumptions like $L$-smoothness. As such, SGD and SGDM struggles with slow convergence even when $\\kappa = 1$ (1st), while also exhibiting instability\u0026mdash;each method converges only for a single choice of $\\eta$ considered. Similar trend is shown when $\\kappa=3$ (2nd) where SPPA starts slowing down. For $\\kappa = 5$ (3rd), all methods except for SPPAM did not make much progress in $10^4$ iterations, for the entire range of $\\eta$ and $\\beta$ considered. Quite remarkably, SPPAM still converges in the same manner without sacrificing both the convergence rate and the range of hyperparameters that lead to convergence.\nConclusion We propose the stochastic proximal point algorithm with momentum (SPPAM), which directly incorporates Polyak\u0026rsquo;s momentum inside the proximal step. We show that SPPAM converges to a neighborhood at a faster rate than stochastic proximal point algorithm (SPPA), and characterize the conditions that result in acceleration. Further, we prove linear convergence of SPPAM to a neighborhood, and provide conditions that lead to an exponential discount of the initial conditions, akin to SPPA. We confirm our theory with numerical simulations on linear and Poisson regression models; SPPAM converges for all the step sizes that SPPA converges, with a faster rate that matches or improves SGDM.\n  Junhyung Lyle Kim, Panos Toulis, and Anastasios Kyrillidis. Convergence and stability of the stochastic proximal point algorithm with momentum. arXiv preprint arXiv:2111.06171, 2021. \u0026#x21a9;\u0026#xfe0e;\n Eric Moulines and Francis R. Bach. Non-Asymptotic Analysis of Stochastic Approximation Algorithms for Machine Learning. In J. Shawe-Taylor, R. S. Zemel, P. L. Bartlett, F. Pereira, and K. Q. Weinberger, editors, Advances in Neural Information Processing Systems 24, pages 451–459. Curran Associates, Inc., 2011. \u0026#x21a9;\u0026#xfe0e;\n Robert M Gower, Nicolas Loizou, Xun Qian, Alibek Sailanbayev, Egor Shulgin, and Peter Richtarik. SGD: General Analysis and Improved Rates. Proceedings of the 36 th International Conference on Machine Learning, page 10, 2019. \u0026#x21a9;\u0026#xfe0e;\n Boris T Polyak. Some methods of speeding up the convergence of iteration methods. Ussr computational mathematics and mathematical physics, 4(5):1–17, 1964. \u0026#x21a9;\u0026#xfe0e;\n Yurii Nesterov et al. Lectures on convex optimization, volume 137. Springer, 2018. \u0026#x21a9;\u0026#xfe0e;\n Chaoyue Liu and Mikhail Belkin. Accelerating sgd with momentum for over-parameterized learning. arXiv preprint arXiv:1810.13395, 2018. \u0026#x21a9;\u0026#xfe0e;\n Rahul Kidambi, Praneeth Netrapalli, Prateek Jain, and Sham Kakade. On the insufficiency of existing momentum schemes for stochastic optimization. In 2018 Information Theory and Applications Workshop (ITA), pages 1–9. IEEE, 2018. \u0026#x21a9;\u0026#xfe0e;\n Mahmoud Assran and Michael Rabbat. On the Convergence of Nesterov’s Accelerated Gradient Method in Stochastic Settings. Proceedings of the 37 th International Conference on Machine Learning, 2020. \u0026#x21a9;\u0026#xfe0e;\n Osman Guler. On the convergence of the proximal point algorithm for convex minimization. ¨ SIAM journal on control and optimization, 29(2):403–419, 1991. \u0026#x21a9;\u0026#xfe0e;\n Ernest K Ryu and Stephen Boyd. Stochastic Proximal Iteration: A Non-Asymptotic Improvement Upon Stochastic Gradient Descent. Author website, page 42, 2017. \u0026#x21a9;\u0026#xfe0e;\n Hilal Asi and John C Duchi. Stochastic (approximate) proximal point methods: Convergence, optimality, and adaptivity. SIAM Journal on Optimization, 29(3):2257–2290, 2019. \u0026#x21a9;\u0026#xfe0e;\n Panos Toulis and Edoardo M Airoldi. Asymptotic and finite-sample properties of estimators based on stochastic gradients. The Annals of Statistics, 45(4):1694–1727, 2017. \u0026#x21a9;\u0026#xfe0e;\n Panos Toulis, Thibaut Horel, and Edoardo M Airoldi. The proximal robbins–monro method. Journal of the Royal Statistical Society: Series B (Statistical Methodology), 83(1):188–212, 2021. \u0026#x21a9;\u0026#xfe0e;\n Gabriel Goh. Why momentum really works. Distill, 2(4):e6, 2017. \u0026#x21a9;\u0026#xfe0e;\n Osman Guler. New proximal point algorithms for convex minimization. ¨ SIAM Journal on Optimization, 2(4):649–664, 1992. \u0026#x21a9;\u0026#xfe0e;\n   ","date":1648771200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1648771200,"objectID":"b0e283ef60258d3c6c60b73ec7ad549b","permalink":"https://jlylekim.github.io/blog/sppam/","publishdate":"2022-04-01T00:00:00Z","relpermalink":"/blog/sppam/","section":"blog","summary":"Read more","tags":["convex optimization","acceleration","proximal point algorithm"],"title":"Convergence and Stability of the Stochastic Proximal Point Algorithm with Momentum","type":"blog"},{"authors":["**Junhyung Lyle Kim**","Mohammad Taha Toghani","César A. Uribe","Anastasios Kyrillidis"],"categories":["distributed optimization","low-rank factorization","quantum computing"],"content":"","date":1647993600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647993600,"objectID":"f021633b1f9ef56eb457e0ed9868bf1e","permalink":"https://jlylekim.github.io/publication/journal-article/local-sfgd-2022/","publishdate":"2022-03-01T00:00:00Z","relpermalink":"/publication/journal-article/local-sfgd-2022/","section":"publication","summary":" ","tags":["distributed optimization","low-rank factorization","quantum computing"],"title":"Local Stochastic Factored Gradient Descent for Distributed Quantum State Tomography","type":"publication"},{"authors":["**Junhyung Lyle Kim**","Panos Toulis","Anastasios Kyrillidis"],"categories":["convex optimization","implicit methods","acceleration","proximal point algorithm"],"content":"","date":1643673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643673600,"objectID":"6619c1a0b1509c7e7687b8d0be26ddc3","permalink":"https://jlylekim.github.io/publication/conference-paper/sppam-l4dc2022/","publishdate":"2022-02-01T00:00:00Z","relpermalink":"/publication/conference-paper/sppam-l4dc2022/","section":"publication","summary":" ","tags":["convex optimization","implicit methods","acceleration","proximal point algorithm"],"title":"Convergence and Stability of the Stochastic Proximal Point Algorithm with Momentum","type":"publication"},{"authors":["**Junhyung Lyle Kim**","Panos Toulis","Anastasios Kyrillidis"],"categories":["convex optimization","implicit methods","acceleration","proximal point algorithm"],"content":"","date":1635724800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635724800,"objectID":"e88b65afe6faf079424d88aba654cd6c","permalink":"https://jlylekim.github.io/publication/conference-paper/sppam-opt2021/","publishdate":"2021-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/sppam-opt2021/","section":"publication","summary":" ","tags":["convex optimization","implicit methods","acceleration","proximal point algorithm"],"title":"Acceleration and Stability of the Stochastic Proximal Point Algorithm","type":"publication"},{"authors":["J. Lyle Kim"],"categories":["non-convex optimization","low-rank factorization","acceleration","quantum computing"],"content":"This blog post is about my recent work on quantum state tomography using (accelerated) non-convex programming,1 published in Photonics 2023. This is a joint work with my advisor Prof. Tasos Kyrillidis at Rice University, Dr. Amir Kalev at USC, and Dr. Georgios Kollias and Dr. Ken Wei at IBM Quantum.\nIntroduction Quantum state tomography (QST) is one of the main procedures to identify the nature of imperfections in quantum processing unit (QPU) implementation. Just like electrical engineers used multimeters and ascilloscopes to verify that circuits work as expected in building classical computers, we need similar verification tools in building quantum computers. QST is one such tool. High-level procedure of QST is to measure the quantum system represented by a density matrix (a PSD matrix with unit trace), estimate the density matrix using the measured data, and then analyze the \u0026ldquo;fit\u0026rdquo; between the estimated density matrix and the true.\nBefore studying how QST is performed, let\u0026rsquo;s start by defining the basic notions. In classical computing, the most fundamental unit of computation are bits, which can be either $0$. or $1$. Analoguous notion in quantum computing is called qubits, short for \u0026ldquo;quantum bits.\u0026rdquo; However, qubits are represented by 2-dimensional unit vectors: \\begin{align*} |0 \\rangle = [1 ~~ 0 ]^\\top, ~~~\\text{and}~~~ |1 \\rangle = [0 ~~ 1 ]^\\top. \\end{align*} One of the main difference between classical computing and quantum computing is that, unlike a classical bit which can either be 0 or 1, a single qubit state $|\\Psi\\rangle$ can be in the \u0026ldquo;superposition\u0026rdquo; of $|0\\rangle$ and $|1\\rangle$, i.e., $| \\Psi \\rangle = \\alpha |0 \\rangle + \\beta |1 \\rangle$, where $\\alpha$ and $\\beta$ are called the \u0026ldquo;probability amplitudes,\u0026rdquo; and are complex numbers. Geometrically, it can be reprensented as a point in the unit sphere, known as the \u0026ldquo;bloch sphere\u0026rdquo; in quantum computing, illustrated below:\n  Bloch sphere. Figure source: https://en.wikipedia.org/wiki/Bloch_sphere#/media/File:Bloch_sphere.svg   Once we \u0026ldquo;measure\u0026rdquo; the state $|\\Psi\\rangle$, it collapses to the $| 0\\rangle$ state with probability $|\\alpha|^2$, and to the $1 \\rangle$ state with probability $|\\beta|^2$.\nQST for a single qubit state Let\u0026rsquo;s now look at how QST is performed for a single qubit state. Any single qubit state can be written as \\begin{align*} \\rho = \\frac{1}{2} \\left( I + r_x \\sigma_x + r_y \\sigma_y + r_z \\sigma_z \\right), \\end{align*} where $\\sigma_x$, $\\sigma_y$, and $\\sigma_z$ are Pauli matrices. the quantity $r_\\alpha = \\text{Tr}(\\rho \\sigma_\\alpha)$ for $\\alpha=x, y, z$ is called the expectation value of $\\sigma_\\alpha$ with respect to $\\rho$. From the above form, we can see that as long as we can estimate the expectation values, we can reconstruct $\\rho$. So how do we measure or estimate the expectation values?\nIt turns out that we cannot measure it right away, but needs to go through a sequence of steps, as below:\n Prepare $M$ number of copies of the state $\\rho$ Measure the projection of $\\rho$ onto eigenvectors of $\\sigma_\\alpha$, resulting in $\\alpha_1, \\dots, \\alpha_M$. Approximation of $\\text{Tr} (\\rho \\sigma_\\alpha)$ is given by $\\frac{1}{M} \\sum_{i=1}^M \\alpha_i$.  To understand better, let\u0026rsquo;s consider an example, with the visual aid of the block sphere in the above figure.\n For simplicity, let\u0026rsquo;s consider estimating $r_z$ ($r_x$ and $r_y$ can be estimated similarly). Assume we prepared $M=1000$ copies of the state $|\\Psi\\rangle$, which collapsed to $|0_z\\rangle$ 400 times, and $|1_z\\rangle$ 600 times. Then, we can compute the empirical frequencies $\\texttt{Tr}\\left(\\rho |0_z \\rangle \\langle 0_z | \\right) \\approx \\tfrac{400}{1000} := y_0^z$ and $\\texttt{Tr}\\left(\\rho |1_z \\rangle \\langle 1_z | \\right) \\approx \\tfrac{600}{1000} := y_1^z$ Finally, we can estimate $\\hat{r}_z = y_0^z - y_1^z$.  By repeating the above procedure for $r_x$ and $r_y$, we have performed a single qubit QST. Mathematically, we can solve the following optimization problem: \\begin{align} \u0026amp; \\underset{\\rho \\in \\mathbb{C}^{d \\times d}}{\\text{minimize}} \u0026amp; \u0026amp; f(\\rho) := \\sum_{\\alpha=x, y, z} \\sum_{i=0,1} \\left( \\texttt{Tr}(\\rho A_i^\\alpha) - y_i^\\alpha \\right)^2 \\\\\n\u0026amp; \\text{subject to} \u0026amp; \u0026amp; \\rho \\succeq 0,~\\texttt{Tr}(\\rho) = 1, \\end{align} where the PSD constraint ($\\rho \\succeq 0$) and the unit trace constraint ($\\texttt{Tr}(\\rho) = 1$) arise from the definition of a density matrix $\\rho$.\nComputational bottlenecks and low-rank prior QST is generally not scalable due to two bottlenecks: $i)$ large data has to be collected to perform tomography; and $ii)$ the space of density matrices grows exponentially (a density matrix $\\rho$ of $n$-qubit is of $2^n \\times 2^n$ dimensional), from which the one that is consistent with the data has to be found.\nTo address the first bottleneck, prior information is often assumed and leveraged to reduce the number of data required. For example, in compressed sensing QST, 2 3 it assumes that the density matrix is of low-rank, which physically means the state is close to a pure state.\nTo give a concrete example, in the figure below, real (top) and imaginary (bottom) parts of four different states are shown: $i)$ $\\texttt{GHZ}$ state, $ii)$ $\\texttt{GHZminus}$ state, $iii)$ $\\texttt{Hadamard}$ state, and $iv)$ $\\texttt{Random}$ state; for the mathematical description of the above states, refer to our paper. 1 As can be seen, for $\\texttt{GHZ}$ and $\\texttt{GHZminus}$ states, only four corners of the real parts have non-zero entries. Therefore, the density matrices are not only of low-rank, but also sparse. Similarly, $\\texttt{Hadamard}$ has uniform entries in the real part, which can be written as a $\\text{rank-}1$ matrix. If these structures are smartly leveraged, one can sometimes confine the search space of density matrices greatly, leading to less number of measurements required for successful tomography results. In particular, it was proven that one can reconstruct a rank-$r$ density matrix using $O(r \\cdot d \\cdot \\text{poly} \\log d)$ measurements.\n  From left to right: $\\texttt{GHZ}$, $\\texttt{GHZminus}$, $\\texttt{Hadamard}$, and $\\texttt{Random}$ states. All states are in 4-qubit system.   With regards to the second bottleneck, variants of gradient descent convex solvers were proposed under synthetic scenarios. 4 5 6 7 However, due to the exponentially increasing space of density matrices, these methods often can be only applied to relatively small system, on top of relying on special-purpose hardwares and proper distributed system designs.8\nOn the contrary, non-convex optimization methods can perform much faster. It was recently shown that one can formulate compressed sensing QST as a non-convex problem,9 which can be solved with rigorous convergence guarantees, allowing density matrix estimation in a large system. A relevant result can be seen in the Results section below, where we compare our proposed (accelerated) non-convex method with convex methods from $\\texttt{Qiskit}$.\nIn this work, we consider the setup where $n$-qubit state is close to a pure state, thus its density matrix is of low-rank. We introduce an accelerated non-convex algorithm with provable gaurantees, which we call $\\texttt{MiFGD}$, short for \u0026ldquo;$\\texttt{M}$omentum $\\texttt{i}$nspired $\\texttt{F}$actored $\\texttt{G}$radient $\\texttt{D}$escent.\u0026rdquo;\nProblem setup We consider the reconstruction of a low-rank density matrix $\\rho^\\star \\in \\mathbb{C}^{d \\times d}$ on a $n$-qubit Hilbert space, where $d=2^n$, through the following $\\ell_2$-norm reconstruction objective:\n\\begin{align} \\label{eq:objective} \\tag{1} \\min_{\\rho \\in \\mathbb{C}^{d \\times d}} \\quad \u0026amp; f(\\rho) := \\tfrac{1}{2} ||\\mathcal{A}(\\rho) - y||_2^2 \\\\\n\\text{subject to} \\quad\u0026amp; \\rho \\succeq 0, ~\\texttt{rank}(\\rho) \\leq r. \\end{align}\nHere, $y \\in \\mathbb{R}^m$ is the measured data through quantum computer or simulation, and $\\mathcal{A}(\\cdot): \\mathbb{C}^{d \\times d} \\rightarrow \\mathbb{R}^m$ is the linear sensing map. The sensing map relates the density matrix $\\rho$ to the measurements through Born rule: $\\left( \\mathcal{A}(\\rho) \\right)_i = \\text{Tr}(A_i \\rho),$ where $A_i \\in \\mathbb{C}^{d \\times d},~i=1, \\dots, m$ are the sensing matrices. From the objective function above, we see two constraints: $i)$ the density matrix $\\rho$ is a positive semidefinite matrix (which is a convex constraint), and $ii)$ the rank of the density matrix is less than $r$ (which is a non-convex constraint).\nAs mentioned earlier, we focus on compressed sensing quantum state tomography setting, where the number of measured data $m$ is much smaller than the problem dimension $O(d^2)$. Compressed sensing is a powerful optimization framework developed mainly by Emmanuel Candès, Justin Romberg, Terence Tao and David Donoho, and requires the following pivotal assumption on the sensing matrix $\\mathcal{A}(\\cdot)$, namely the Restricted Isometry Property (RIP) (on $\\texttt{rank}$-$r$ matrices): 10\n\\begin{align} \\label{eq:rip} \\tag{2} (1 - \\delta_r) \\cdot || X ||_F^2 \\leq || \\mathcal{A}(X) ||_2^2 \\leq (1 + \\delta_r) \\cdot ||X||_F^2. \\end{align}\nIntuitively, the above RIP assumption states that the sensing matrices $\\mathcal{A}(\\cdot)$ only \u0026ldquo;marginally\u0026rdquo; changes the norm of the matrix $X$.\nGoing back to the main optimization problem in Eq. \\eqref{eq:objective}, instead of solving it as is, we propose to solve a factorized version of it, following recent work 9: \\begin{align} \\label{eq:factored-obj} \\tag{3} \\min_{U \\in \\mathbb{C}^{d \\times r}} f(UU^\\dagger) := \\tfrac{1}{2} || \\mathcal{A} (UU^\\dagger) - y ||_2^2, \\end{align} where $U^\\dagger$ denotes the adjoint of $U$. The motivation is rather clear: in the original objective function in Eq. \\eqref{eq:objective}, the density matrix $\\rho$ is represented as a $d \\times d$ Hermitian matrix, and due to the (non-convex) $\\texttt{rank}(\\cdot)$ constraint, some method to project onto the set of low-rank matrices is required. Instead, we work in the space of the factors $U \\in \\mathbb{C}^{d \\times r}$, and by taking an outer-product, the $\\texttt{rank}(\\cdot)$ constraint and the PSD constraint $\\rho \\succeq 0$ are automatically satisfied, leading to the non-convex formulation in Eq. \\eqref{eq:factored-obj}. But how do we solve such problem?\nA common approach is to use gradient descent on $U$, which iterates as follows: \\begin{align} \\label{eq:fgd} \\tag{4} U_{i+1} \u0026amp;= U_{i} - \\eta \\nabla f(U_i U_i^\\dagger) \\cdot U_i \\\\\n\u0026amp;= U_{i} - \\eta \\mathcal{A}^\\dagger \\left(\\mathcal{A}(U_i U_i^\\dagger) - y\\right) \\cdot U_i. \\end{align}\nHere, $\\mathcal{A}^\\dagger: \\mathbb{R}^m \\rightarrow \\mathbb{C}^{d \\times d}$ is the adjoint of $\\mathcal{A}$, defined as $\\mathcal{A}^\\dagger = \\sum_{i=1}^m x_i A_i.$ $\\eta$ is a hyperparameter called step size or learning rate. This method is called \u0026ldquo;$\\texttt{F}$actored $\\texttt{G}$radient $\\texttt{D}$escent\u0026rdquo; ($\\texttt{FGD}$), and was utilized to solve the non-convex objective function in Eq. \\eqref{eq:factored-obj}, (surprisingly) with provable gaurantees.9\nMomentum-inspired Factored Gradient Descent Momentum is one of the de facto techniques to achieve acceleration in gradient descent type of algorithms. Acceleration methods exist in various forms, including Polyak\u0026rsquo;s momentum, Nesterov\u0026rsquo;s acceleration, classical momentum, etc. They end up behaving pretty similarly, and we will not get into the detail of different acceleration methods in this post. For interested readers, I recommend this blog post by James Melville.\nA common feature accross acceleration methods is that, with proper hyper-parameter tuning, they can provide accelerated convergence rate with virtually no additional computation. This is exactly the motivation of the $\\texttt{MiFGD}$ algorithm we propose for solving the non-convex objective in Eq. \\eqref{eq:factored-obj}, and the algorithm proceeds as follows: \\begin{align} \\label{eq:mifgd} \\tag{5} U_{i+1} \u0026amp;= Z_{i} - \\eta \\mathcal{A}^\\dagger \\left(\\mathcal{A}(Z_i Z_i^\\dagger) - y\\right) \\cdot Z_i, \\\\\nZ_{i+1} \u0026amp;= U_{i+1} + \\mu \\left(U_{i+1} - U_i\\right). \\end{align}\nHere, $Z_i \\in \\mathbb{C}^{d\\times r}$ is a rectangular matrix (with the same dimension as $U_i$) which accumulates the \u0026ldquo;momentum\u0026rdquo; of the iterates $U_i$. $\\mu$ is the momentum parameter that balances the weight between the previous estimate $U_i$ and the current estimate $U_{i+1}.$\nWhile the $\\texttt{MiFGD}$ algorithm in Eq. \\eqref{eq:mifgd} looks quite similar to $\\texttt{FGD}$ in Eq. \\eqref{eq:fgd}, it complicates the convergence theory significantly. This is because the two-step momentum procedure has to be considered, on top of the fact that the objective function in Eq. \\eqref{eq:factored-obj} is non-convex. We will not get into the details of the convergence thoery here; interested readers are referred to our paper.1 We finish this section with an informal theorem that illustrates the convergence behavior of $\\texttt{MiFGD}$:\nTheorem 1 ($\\texttt{MiFGD}$ convergence rate (informal)). Assume that $\\mathcal{A}(\\cdot)$ satisfies the RIP for some constant $0 \u0026lt; \\delta_{2r} \u0026lt;1$. Let $y = \\mathcal{A}(\\rho^\\star)$ denote the set of measurements, by measuring the quantum density matrix $\\rho^\\star$. Given a good initialization point $U_0$, and setting step size $\\eta$ and momentum $\\mu$ appropriately, $\\texttt{MiFGD}$ converges with a linear rate to a region—with radius that depends on $O(\\mu)$—around the global solution $\\rho^\\star$.\nResults In this section, we review some of the experimental results. First, we obtain real quantum data from IBM\u0026rsquo;s Quantum Processing Unit (QPU) by realizing two types of quantum states: $\\texttt{GHZminus}(n)$ and $\\texttt{Hadamard}(n)$, for $n = 6, 8$, where $n$ is the number of qubits. In quantum computing, obtaining measurements itself is not a trivial process, which we will not get into the detail in this post. Yet, we highlight that, in the following plots, we only use $20$% of the measurements that are information-theoretically compelete, i.e. we sample $m = 0.2 \\cdot d^2$ measurements (recall that we are working on compressed sensing QST setting). We compare the effect of different momentum parameters in the figure below, where the accuracy of the estimated density matrix $\\widehat{\\rho}$ is measured with the true density matrix $\\rho^\\star$ in terms of the squared Frobenius norm, i.e. $||\\widehat{\\rho} - \\rho^\\star||_F^2$:\n  $\\texttt{MiFGD}$ performance on real quantum data from IBM QPU. Top-left: $\\texttt{GHZminus}(6)$, Top-right: $\\texttt{GHZminus}(8)$, Bottom-left: $\\texttt{Hadamard(6)}$, Bottom-right: $\\texttt{Hadamard}(8)$.   Above figure summarizes the performance of $\\texttt{MiFGD}$. In the legends, $\\mu^\\star$ is the momentum parameter proposed by our theory; however, it should be noted that $\\texttt{MiFGD}$ converges with larger momentum values than $\\mu^\\star$, in particular featuring a steep dive to convergence for the largest value of $\\mu$ we tested. Moreover, the above figure also highlights the universality of our approach: its performance is oblivious to the quantum state reconstructed, as long as it satisfies purity or it is close to a pure state. Our method does not require any additional structure assumptions in the quantum state.\nIt should be noted that quantum data are inherently noisy. To highlight the level of noise existing in real quantum data, in the figure below, we also plot the performance of $\\texttt{MiFGD}$ in the same setting using simulated quantum data from IBM\u0026rsquo;s QASM simulator:   $\\texttt{MiFGD}$ performance on synthetic data using IBM\u0026rsquo;s QASM simulator. Top-left: $\\texttt{GHZminus}(6)$, Top-right: $\\texttt{GHZminus}(8)$, Bottom-left: $\\texttt{Hadamard(6)}$, Bottom-right: $\\texttt{Hadamard}(8)$.   We see a similar trend with the result using real quantum data from IBM\u0026rsquo;s QPU. However, we see that the overall accuracy of the reconstucted and the target states, $|| \\hat{\\rho} - \\rho^\\star||_F^2$, is generally lower for the real quantum data\u0026ndash;they do not reach the accuracy level of $10^{-1}$, which is acchieved for all cases using QASM simulator. This difference is summarized in the figure below:\n  Final fidelity of $\\texttt{MiFGD}$ comparison using real quantum data from IBM\u0026rsquo;s QPU and simulated quantum data using QASM.   Performance comparison with QST methods in $\\texttt{Qiskit}$ Now, we compare the performance of $\\texttt{MiFGD}$ with QST methods from $\\texttt{Qiskit}$, again using IBM\u0026rsquo;s QASM simulator. $\\texttt{Qiskit}$ provides two QST methods: $i)$ the $\\texttt{CVXPY}$ method which relies on convex optimiztion, and $ii)$ the $\\texttt{lstsq}$ which ruses least-squares fitting. Both methods solve the following full tomography problem (not compressed sensing QST problem):\n\\begin{align} \\min_{\\rho \\in \\mathbb{C}^{d \\times d}} \\quad \u0026amp; f(\\rho) := \\tfrac{1}{2} ||\\mathcal{A}(\\rho) - y||_2^2 \\\\\n\\text{subject to} \\quad \u0026amp; \\rho \\succeq 0, ~\\texttt{Tr}(\\rho) = 1. \\end{align}\nWe note that $\\texttt{MiFGD}$ is not restricted to ``tall'' $U$ scenarios to encode PSD and rank constraints: even without rank constraints, one could still exploit the matrix decomposition $\\rho = UU^\\dagger$ to avoid the PSD projection, $\\rho \\succeq 0$, where $U \\in \\mathbb{C}^{d \\times d}$.\nWe consider the following cases: $\\texttt{GHZ}(n), \\texttt{Hadamard}(n),$ and $\\texttt{Random}(n)$ for $n = 3, \\dots, 8$. The results are shown in the figure below:\n  Performance comparison with $\\texttt{Qiskit}$ methods. All experiments are performed on a 13” Macbook Pro with 2.3 GHz Quad-Core Intel Core i7 CPU and 32 GB RAM.   Some notable remarks: $i)$ For small-scale scenarios ($n=3, 4$), $\\texttt{CVXPY}$ and $\\texttt{lstsq}$ attain almost perfect fidelity, while being comparable or faster than $\\texttt{MiFGD}$. $ii)$ The difference in performance becomes apparent from $n = 6$ and on: while $\\texttt{MiFGD}$ attains $98$% fidelity in less than $5$ seconds, $\\texttt{CVXPY}$ and $\\texttt{lstsq}$ require up to hundreds of seconds to find a good solution. Finally, while $\\texttt{MiFGD}$ gets to high-fidelity solutions in seconds for $n = 7, 8$, $\\texttt{CVXPY}$ and $\\texttt{lstsq}$ methods require more than 12 hours execution time; however, their execution never ended, since the memory usage exceeded the system\u0026rsquo;s available memory.\nPerformance comparison with neural-network QST using $\\texttt{Qucumber}$ Next, we compare the performance of $\\texttt{MiFGD}$ compare with neural-network based QST methods, proivded by $\\texttt{Qucumber}$. We consider the same quantum states as with $\\texttt{Qiskit}$ experiments, but here we consider the case where only $50$% of the measurements are available.\nWe report the fidelity of the reconstruction as a function of elapsed training time for $n = 3, 4$ in the figure below for all methods provided by $\\texttt{Qucumber}$: $\\texttt{PRWF}, \\texttt{CWF}$, and $\\texttt{DM}$. Note that Time (secs) on $x$-axis is plotted with log-scale.\n  Performance comparison with $\\texttt{Qucumber}$ methods. All experiments are performed on a NVidia GeForce GTX 1080 TI with 11GB RAM.   We observe that for all cases, $\\texttt{Qucumber}$ methods are orders of magnitude slower than $\\texttt{MiFGD}$. For the $\\texttt{Hadamard}(n)$ and $\\texttt{Random}(n)$, reaching reasonable fidelities is significantly slower for both $\\texttt{CWF}$ and $\\texttt{DM},$ while $\\texttt{PRWF}$ hardly improves its performance throughout the training. For the $\\texttt{GHZ}$ case, $\\texttt{CWF}$ and $\\texttt{DM}$ also shows non-monotonic behaviors: even after a few thousands of seconds, fidelities have not \u0026ldquo;stabilized\u0026rdquo;, while $\\texttt{PRWF}$ stabilizes in very low fidelities. In comparison, $\\texttt{MiFGD}$ is several orders of magnitude faster than both $\\texttt{CWF}$ and $\\texttt{DM}$ and fidelity smoothly increases to comparable or higher values. What is notable is the scalability of $\\texttt{MiFGD}$ compared to neural network approaches for higher values of $n$.\nTo see this more clearly, in the table below, we report the final fidelities (within the $3$ hour time window), and reported times. We see that for many cases, $\\texttt{CWF}$ and $\\texttt{DM}$ methods did not complete a single iterations within $3$ hours.\n  Comparison with Qucumber methods.   The effect of parallelization in $\\texttt{MiFGD}$ We also study the effect of paralleization in running $\\texttt{MiFGD}$. We parallelize the iteration step across a number of processes, that can be either distributed and network connected, or sharing memory in a multicore environment. Our approach is based on Message Passing Interface (MPI) specification. We assign to each process a subset of the measurement labels consumed by the parallel computation. At each step, a process first computes the local gradient using a subset of measurements. These local gradients are then communicated so that they can be added up to form the full gradient, and the full gradient is shared with each worker.\nIn our first round of experiments, we investigate the scalability of the parallelization approach. We vary the number $p$ of parallel processes $(p=1, 2, 4, 8, 16, 32, 48, 64, 80, 96)$, collect timings for reconstructing $\\texttt{GHZ}(4)$, $\\texttt{Random}(6)$ and $\\texttt{GHZminus}(8)$ states, and report speedups $T_p/T_1$ we gain from $\\texttt{MiFGD}$ in the figure bloew (left panel). We observe that the benefits of parallelization are pronounced for bigger problems (here: $n=8$ qubits) and maximum scalability results when we use all physical cores ($48$ in our platform).\n  Effect of parallelization of $\\texttt{MiFGD}$. Left: scalability of parallelization of $\\texttt{MiFGD}$ for different number of processors. Middle: fidelity versus time consued for different number of processors on $\\texttt{Hadamard}(10)$ state. Right: The effect of momentum on $\\texttt{Hadamard}(10)$ state with 48 processors.   Further, we move to larger problems ($n=10$ qubits: reporting on reconstructing $\\texttt{Hadamard}(10)$ state) and focus on the effect parallelization to achieving a given level of fidelity in reconstruction. In the middle panel of the figure above, we illustrate the fidelity as a function of the time spent in the iteration loop of $\\texttt{MiFGD}$ for ($p=8, 16, 32, 48, 64$): we observe the smooth path to convergence in all $p$ counts which again minimizes compute time for $p=48$. Note that in this case we use $10$% of the complete measurements, and the momenutum parameter $\\mu=\\frac{1}{4}$.\nFinally, in the right panel of the figure above, we fix the number of processes to $p=48$, in order to minimize compute time and increase the percentage of used measurements to $20$% of the complete measurements available for $\\texttt{Hadamard}(10)$. We vary the momentum parameter from $\\mu=0$ (no acceleration) to $\\mu=\\frac{1}{4}$, and confirm that we indeed get faster convergence times in the latter case while the fidelity value remains the same (i.e. coinciding upper plateau value in the plots). We can also compare with the previous fidelity versus time plot, where the same $\\mu$ but half the measurements are consumed: more measurements translate to faster convergence times (plateau is reached roughly $25$% faster; compare the green line with the yellow line in the previous plot).\nConclusion We have introduced the $\\texttt{MiFGD}$ algorithm for the factorized form of the low-rank QST problems. We proved that, under certain assumptions on the problem parameters, $\\texttt{MiFGD}$ converges linearly to a neighborhood of the optimal solution, whose size depends on the momentum parameter $\\mu$, while using acceleration motions in a non-convex setting. We demonstrate empirically, using both simulated and real data, that $\\texttt{MiFGD}$ outperforms non-accelerated methods on both the original problem domain and the factorized space, contributing to recent efforts on testing QST algorithms in real quantum data. These results expand on existing work in the literature illustrating the promise of factorized methods for certain low-rank matrix problems. Finally, we provide a publicly available implementation of our approach, compatible to the open-source software $\\texttt{Qiskit}$, where we further exploit parallel computations in $\\texttt{MiFGD}$ by extending its implementation to enable efficient, parallel execution over shared and distributed memory systems.\n  Junhyung Lyle Kim, George Kollias, Amir Kalev, Ken X. Wei, Anastasios Kyrillidis. Fast quantum state reconstruction via accelerated non-convex programming. Photonics, 10(2), 2023. \u0026#x21a9;\u0026#xfe0e;\n D. Gross, Y.-K. Liu, S. Flammia, S. Becker, and J. Eisert. Quantum state tomography via compressed sensing. Physical review letters, 105(15):150401, 2010. \u0026#x21a9;\u0026#xfe0e;\n A. Kalev, R. Kosut, and I. Deutsch. Quantum tomography protocols with positivity are compressed sensing protocols. NPJ Quantum Information, 1:15018, 2015. \u0026#x21a9;\u0026#xfe0e;\n D. Gonçalve, M. Gomes-Ruggiero, and C. Lavor. A projected gradient method for optimization over density matrices. Optimization Methods and Software, 31(2):328–341, 2016. \u0026#x21a9;\u0026#xfe0e;\n E. Bolduc, G. Knee, E. Gauger, and J. Leach. Projected gradient descent algorithms for quantum state tomography. npj Quantum Information, 3(1):44, 2017. \u0026#x21a9;\u0026#xfe0e;\n Jiangwei Shang, Zhengyun Zhang, and Hui Khoon Ng. Superfast maximum-likelihood reconstruction for quantum tomography. Phys. Rev. A, 95:062336, Jun 2017. \u0026#x21a9;\u0026#xfe0e;\n Zhilin Hu, Kezhi Li, Shuang Cong, and Yaru Tang. Reconstructing pure 14-qubit quantum states in three hours using compressive sensing. IFAC-PapersOnLine, 52(11):188 – 193, 2019. 5th IFAC Conference on Intelligent Control and Automation Sciences ICONS 2019. \u0026#x21a9;\u0026#xfe0e;\n Zhibo Hou, Han-Sen Zhong, Ye Tian, Daoyi Dong, Bo Qi, Li Li, Yuanlong Wang, Franco Nori, Guo-Yong Xiang, Chuan-Feng Li, et al. Full reconstruction of a 14-qubit state within four hours. New Journal of Physics, 18(8):083036, 2016. \u0026#x21a9;\u0026#xfe0e;\n A. Kyrillidis, A. Kalev, D. Park, S. Bhojanapalli, C. Caramanis, and S. Sanghavi. Provable quantum state tomography via non-convex methods. npj Quantum Information, 4(36), 2018. \u0026#x21a9;\u0026#xfe0e;\n Benjamin Recht, Maryam Fazel, and Pablo A Parrilo. Guaranteed minimum-rank solutions of linear matrix equations via nuclear norm minimization. SIAM review, 52(3):471–501, 2010. \u0026#x21a9;\u0026#xfe0e;\n   ","date":1615939200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615939200,"objectID":"6628923300069b897114ea761136a3d5","permalink":"https://jlylekim.github.io/blog/acc-qst/","publishdate":"2021-03-17T00:00:00Z","relpermalink":"/blog/acc-qst/","section":"blog","summary":"Read more","tags":["non-convex optimization","low-rank factorization","acceleration","quantum computing"],"title":"Fast Quantum State Tomography via Accelerated Non-convex Programming","type":"blog"},{"authors":["J. Lyle Kim"],"categories":["quantum computing"],"content":"We continue our study of basics of quantum mechanics. Part 1 of this blog series can be found here.\n4. Matrix formulation of quantum mechanics Matrix formulation of quantum mechanics was first proposed by Werner Heisenberg, Max Born, and Pascual Jordan. Later, it was unified with wave mechanics formulation introduced by Erwin Schrödinger.\nMatrix formulation is particularly useful when we work with finite discrete bases. This is because by using matrix formulation, quantum mechanical quantities can be expressed mostly in matrix multiplication, which is something we understand quite well from linear algebra, and also has been highly optimized both in terms of software (e.g. leveraging structures like sparsity) and hardware (e.g. using GPUs).\nLet\u0026rsquo;s start with the basics. Recall that a ket $| \\psi \\rangle = \\sum_i c_i |u_i \\rangle$ where $c_i = \\langle u_i | \\psi \\rangle$, which can be thought of as the representation of the ket $|\\psi\\rangle$ in the ${|u_i\\rangle}$ basis. To write the ket $|\\psi\\rangle$ in matrix form, we simply stack the representation as a column vector as follows:\n$$ \\begin{bmatrix} \\langle u_1 | \\psi \\rangle\\\\\n\\langle u_2 | \\psi \\rangle\\\\\n\\vdots\\\\\n\\langle u_i | \\psi \\rangle\\\\\n\\vdots \\end{bmatrix} = \\begin{bmatrix} c_1\\\\\nc_2\\\\\n\\vdots\\\\\nc_i\\\\\n\\vdots \\end{bmatrix}. $$\nSimilarly, to express a bra $\\langle \\psi | = \\sum_i c_i^* \\langle u_i |$ where $c_i^* = \\langle \\psi | u_i \\rangle = \\langle u_i | \\psi \\rangle^*$, we write them as a row vector:\n$$[\\langle \\psi | u_1 \\rangle~\\langle \\psi | u_2 \\rangle \\cdots \\langle \\psi | u_i \\rangle \\cdots ] = [c_1^* c_2^* \\cdots c_i^* \\cdots]. $$\nNow, we look at an operator $\\hat{A} = \\sum_{ij} A_{ij} |u_i \\rangle \\langle u_j|$ where $A_{ij} = \\langle u_i | \\hat{A} | u_j \\rangle$, which can be expressed as a matrix:\n$$ \\begin{bmatrix} A_{11} \u0026amp; A_{12} \u0026amp; \\cdots \u0026amp; A_{1j} \u0026amp; \\cdots \\\\\nA_{21} \u0026amp; A_{22} \u0026amp; \\cdots \u0026amp; A_{2j} \u0026amp; \\cdots \\\\\n\\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \\\\\nA_{i1} \u0026amp; A_{i2} \u0026amp; \\cdots \u0026amp; A_{ij} \u0026amp; \\cdots \\\\\n\\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \\end{bmatrix} $$\nAs an example, let\u0026rsquo;s write the expression $|\\psi'\\rangle = \\hat{A} |\\psi\\rangle$ in terms of matrix formulation. First, recall the following:\n $|\\psi'\\rangle = \\sum_i c_i' |u_i\\rangle$ $|\\psi\\rangle = \\sum_i c_i |u_i\\rangle$  Then, we can express the coefficient $c_i'$ as follows:\n$$ \\begin{aligned} c_i' \u0026amp;= \\langle u_i | \\psi' \\rangle = \\langle u_i | \\hat{A}| \\psi \\rangle = \\langle u_i | \\hat{A} \\mathbb{I} | \\psi \\rangle \\\\\n\u0026amp;= \\langle u_i | \\hat{A} \\left( \\sum_j |u_j \\rangle \\langle u_j | \\right) |\\psi \\rangle = \\sum_j \\langle u_i | \\hat{A} | u_j \\rangle \\langle u_j | \\psi \\rangle \\\\\n\u0026amp;= \\sum_j A_{ij} c_j. \\end{aligned} $$\nThe last expression from the above can be expressed in matrix formulation as follows:\n$$ \\begin{aligned} \u0026amp;\\begin{bmatrix} A_{11} \u0026amp; A_{12} \u0026amp; \\cdots \u0026amp; A_{1j} \u0026amp; \\cdots \\\\\nA_{21} \u0026amp; A_{22} \u0026amp; \\cdots \u0026amp; A_{2j} \u0026amp; \\cdots \\\\\n\\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \\\\\nA_{i1} \u0026amp; A_{i2} \u0026amp; \\cdots \u0026amp; A_{ij} \u0026amp; \\cdots \\\\\n\\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots \u0026amp; \\end{bmatrix} \\cdot \\begin{bmatrix} c_1\\\\\nc_2\\\\\n\\vdots\\\\\nc_i\\\\\n\\vdots \\end{bmatrix} = \\begin{bmatrix} A_{11}c_1 + \\dots + A_{1j}c_j \\dots \\\\\nA_{21}c_1 + \\dots + A_{2j}c_j \\dots \\\\\n\\vdots\\\\\nA_{i1}c_1 + \\dots + A_{ij}c_j \\dots \\\\\n\\vdots \\end{bmatrix} = \\begin{bmatrix} c_1'\\\\\nc_2'\\\\\n\\vdots\\\\\nc_i'\\\\\n\\vdots \\end{bmatrix} \\end{aligned}. $$\nTherefore, we arrive at the matrix formulation for $c_i'$ we began with. Similarly, we can express other quantum mechanical quantities we have seen in terms of matrix formulation.\n5. Change of basis in quantum mechanics Recall that we can represent state space with an orthonormal basis. For example, we have been working with the basis ${ | u_i \\rangle }$ where $\\langle u_i | u_j \\rangle = \\delta_{ij}$. Then, we can express a ket $|\\psi\\rangle$ in the ${ |u_i\\rangle }$ basis, i.e.\n$$ |\\psi \\rangle = \\sum_i c_i | u_i \\rangle \\quad\\text{where}\\quad c_i = \\langle u_i | \\psi \\rangle. $$\nWe will look at how to express the ket $|\\psi\\rangle$ in different basis, ${ |v_j \\rangle }$, i.e.\n$$ |\\psi \\rangle = \\sum_j d_j | v_j \\rangle \\quad\\text{where}\\quad d_j = \\langle v_j | \\psi \\rangle. $$\nThe step goes as follows: first, express the coefficient $d_j$ as above. Then, insert an identity, and using the resolution of the identity matrix in ${ |u_i \\rangle }$ basis, we find an expression that relates the coefficient $d_j$ and $c_i$. Mathematically,\n$$ \\begin{aligned} d_j \u0026amp;= \\langle v_j | \\psi \\rangle = \\langle v_j | \\mathbb{I} | \\psi \\rangle = \\langle v_j | \\left( \\sum_i |u_i \\rangle \\langle u_i | \\right) | \\psi \\rangle \\\\\n\u0026amp;= \\sum_i \\langle v_j | u_i \\rangle \\langle u_i | \\psi \\rangle = \\sum_i S_{ji} c_i. \\end{aligned} $$\nThus, to compute $d_j$ given $c_i$, we simply need to compute the quantity $S_{ji} = \\langle v_j | u_i \\rangle$, which is called an \u0026ldquo;overlap.\u0026rdquo; Using the matrix formulation we studied in the previous chapter, we can also express this relationship as follows:\n$$ \\begin{bmatrix} d_1\\\\\nd_2\\\\\n\\vdots \\end{bmatrix} = \\begin{bmatrix} S_{11} \u0026amp; S_{12} \u0026amp; \\cdots \\\\\nS_{21} \u0026amp; S_{22} \u0026amp; \\cdots \\\\\n\\vdots \u0026amp; \\vdots \u0026amp; \\ddots \\\\\n\\end{bmatrix} \\cdot \\begin{bmatrix} c_1\\\\\nc_2\\\\\n\\vdots \\end{bmatrix}. $$\nWe can also compute $c_i$ given $d_j$ in a similar fashion. If you follow the steps similar to the mathematical derivation above, it turns out that:\n$$ c_i = \\sum_j \\langle u_i | v_j \\rangle d_j \\quad\\text{where}\\quad \\langle u_i | v_j \\rangle = \\langle v_j | u_i \\rangle^* = S_{ji}^*. $$\nTo close this chapter, let\u0026rsquo;s look at how we perform a change of basis with an operator $\\hat{A}$. We write the elements of operator $\\hat{A}$ in ${ |u_i\\rangle }$ basis and ${ |v_j\\rangle }$ basis as $A_{ik}^u = \\langle u_i | \\hat{A} | u_k \\rangle$ and $A_{j\\ell}^v = \\langle v_j | \\hat{A} | v_\\ell \\rangle$, respectively. Then, we can compute $A_{j\\ell}^v$ in terms of $A_{ik}^u$ as follows:\n$$ \\begin{aligned} A_{j\\ell}^v \u0026amp;= \\langle v_j | \\hat{A} | v_\\ell \\rangle = \\langle v_j | \\mathbb{I}\\hat{A}\\mathbb{I} | v_\\ell \\rangle \\\\\n\u0026amp;= \\langle v_j | \\left( \\sum_i |u_i\\rangle\\langle u_i| \\right) \\hat{A} \\left( \\sum_k |u_k\\rangle \\langle u_k| \\right) | v_\\ell \\rangle \\\\\n\u0026amp;=\\sum_{i,~k} \\langle v_j | u_i \\rangle \\langle u_i | \\hat{A} | u_k \\rangle \\langle u_k | v_\\ell \\rangle \\\\\n\u0026amp;= \\sum_{i,~k} S_{ji} A_{ik}^u S_{\\ell k}^*. \\end{aligned} $$\nAgain, we can also go in the opposite direction. It turns out that to express $A_{ik}^u$ in terms of $A_{j\\ell}^v$ is:\n$$ A_{ik}^u = \\sum_{j,~\\ell}S_{ji}^*A_{j\\ell}^v S_{\\ell k}. $$\n6. Eigenvalues and eigenstates in quantum mechanics As we saw in Chapter 2 of the previous post, operators are mathematical objects that allow us to describe physical properties. Eigenvalues and eigenstates are particularly important in quantum mechanics, because when we measure the physical properties, the only possible outcome is one of the eigenvalues of the associated operator; also, the state of system, after the measurement, is in the corresponding eigenstate. We start with the third postulate of quantum mechanics that summarizes the above:\nPostulate III: The result of a measurement of a physical quantity is one of the eigenvalues of the associated observable.\nMathematically, we can write down the eigenvalue equation as follows:\n$$ \\hat{A} |\\psi\\rangle = \\lambda |\\psi \\rangle, $$\nwhere $\\hat{A}$ is an operator, $|\\psi\\rangle$ is a \u0026ldquo;special\u0026rdquo; ket called eigenstate (i.e. eigenvector) of $\\hat{A}$, and $\\lambda$ is the eigenvalue of $\\hat{A}$. As can be seen, the operator $\\hat{A}$ takes the ket $|\\psi\\rangle$ as an input, and outputs the same ket $|\\psi\\rangle$, only scaled with $\\lambda$.\n","date":1615766400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615766400,"objectID":"4d2c4a34ba2779c820c503e5e0a8bae7","permalink":"https://jlylekim.github.io/blog/quantum-mechanics-2/","publishdate":"2021-03-15T00:00:00Z","relpermalink":"/blog/quantum-mechanics-2/","section":"blog","summary":"Read more","tags":["quantum computing"],"title":"Basics of Quantum Mechanics 2","type":"blog"},{"authors":["J. Lyle Kim"],"categories":["quantum computing"],"content":"In this series of blog posts, I want to introduce some basics of quantum mechanics, which can be helpful to start learning about quantum computing. I myself do not have any physics background, and found this series of videos extremely helpful. This post is mainly based on this series of lectures, and I hope it is helpful to anyone who wants to start learning quantum computing.\n1. Dirac notation in state space State space is the name we give to the vector space in which the quantum system lives. Just like Euclidean space, which is used to describe the \u0026ldquo;world\u0026rdquo; in classical mechanics, state space is another vector space that shares many similarities with Euclidean space. For instance, just like Euclidean space, state space also is equipped with an inner product, thus making it a Hilbert space.\nEven though we use a lot of linear algebra in quantum mechanics, we use quite different notation, called \u0026ldquo;Dirac notation,\u0026rdquo; invented by one of the founders quantum mechanics, Paul Dirac. We start with the first postulate of quantum mechanics:\nPostulate I: The state of a physical system is characterized by a state vector that belongs to a complex vector space $\\mathcal{V}$, called the state space of the system.\nIt turns out that the vector space properties that Euclidean space has mostly translates to state space, with a few tweaks. Let\u0026rsquo;s recap the properties of (3-dimensional) Euclidean space first.\nEuclidean space (in 3-dimension for illustration) has the following properties:\n An element $r$ is called a (3-dimensional) \u0026ldquo;vector\u0026rdquo; Vector addition: $r_1 + r_2 = r_3 \\in \\mathbb{R}^3$ Commutativity of vector addition: $r_1 + r_2 = r_2 + r_1$ Associativity of vector addition: $(r_1 + r_2) + r_3 = r_1 + (r_2 + r_3)$ Identity for vector addition: $0 + r = r$ Inverse of vector addition: $r + (-r) = 0$ Scalar multiplication: $a \\cdot r \\in \\mathbb{R}^3$ Associativity of scalar multiplication: $a(br) = (ab)r$ Distributivity of scalar multiplication: $(a + b )r = ar + br$, and $a(r_1 + r_2) = ar_1 + ar_2$ Identity for vector multiplication: $1\\cdot r = r$  The above properties more or less translate directly to state space.\nState space $\\mathcal{V}$ has the following properties:\n An element $| \\psi \\rangle$ is called a \u0026ldquo;ket\u0026rdquo; Vector addition: $|\\psi_1 \\rangle + |\\psi_2\\rangle = |\\psi_3 \\rangle \\in \\mathcal{V}$ Commutativity of vector addition: $|\\psi_1 \\rangle + |\\psi_2\\rangle = |\\psi_2 \\rangle + |\\psi_1 \\rangle$ Associativity of vector addition: $(|\\psi_1 \\rangle + |\\psi_2\\rangle) + |\\psi_3\\rangle = |\\psi_1 \\rangle + (|\\psi_2\\rangle +|\\psi_3\\rangle)$ Identity for vector addition: $0 + |\\psi\\rangle = |\\psi \\rangle$ Inverse of vector addition:$|\\psi \\rangle + (- |\\psi \\rangle) = 0$ Sacalar multiplication: $a | \\psi \\rangle \\in \\mathcal{V}$ Associativity of scalar multiplication: $a( b | \\psi \\rangle ) = (ab) | \\psi \\rangle$ Distributivity of scalar multiplication: $(a+b) | \\psi \\rangle = a| \\psi \\rangle + b | \\psi \\rangle$, and $a ( | \\psi_1 \\rangle + | \\psi_2 \\rangle ) = a| \\psi_1 \\rangle + b| \\psi_2 \\rangle$ Identity for vector multiplication: $1 | \\psi \\rangle = | \\psi \\rangle$  Now, we move to some differences. Both Euclidean space and state space are subsets of Hilbert space, and thus are equipped with scalar (inner) product.\nScalar product in Euclidean space:\n$SP(r_1, r_2) = r_1 \\bullet r_2 = c, \\quad c \\in \\mathbb{R}$\n Conjugation: $r_1 \\bullet r_2 = r_2 \\bullet r_1$ Linearity: $r_1 \\bullet a (r_2) = a(r_1) \\bullet r_2 = a(r_1 \\bullet r_2)$ and $r_1 \\bullet (r_2 + r_3) = r_1 \\bullet r_2 + r_1 + r_3$ Positivity: $r_1 \\bullet r_1 \\geq 0$, and $r_1 \\bullet r_2 = 0$ if and only if $r_1 = 0$  Scalar product in state space:\n$SP(|\\psi_1,~|\\psi_2\\rangle) = c, \\quad c \\in \\mathbb{C}$\nNotice that the scalar $c$ is now a complex number, which is one of the crucial differences of state space and Euclidean space. Now we look at the properties of scalar product in state space:\n Conjugation: $SP(|\\psi \\rangle,~|\\phi \\rangle) = [SP(|\\phi \\rangle,~|\\psi \\rangle)]^*$ Linearity in second argument: $SP(|\\psi \\rangle,~a |\\phi \\rangle) = a SP(|\\psi \\rangle,~|\\phi \\rangle)$ and $SP(|\\psi \\rangle,~|\\phi \\rangle + |\\chi\\rangle) = SP(|\\psi \\rangle,~|\\phi \\rangle) + SP(|\\psi \\rangle,~|\\chi \\rangle)$ Anti-linearity in first argument: $SP(a|\\psi \\rangle,~ |\\phi \\rangle) = [SP(|\\psi \\rangle,~a|\\psi \\rangle)]^* = a^*[SP(|\\phi \\rangle, |\\psi\\rangle) ]^* = a^* SP(|\\psi \\rangle, |\\phi \\rangle)$ where $a^*$ is a complex conjugate. Positivity: $SP( |\\psi \\rangle, |\\psi \\rangle ) \\geq 0$, and $SP( |\\psi \\rangle, |\\psi \\rangle ) = 0$ iff $|\\psi \\rangle = 0$  So the main difference comes from the fact that state space lives in complex vector space, rather than real vector space. Through the scalar product, we can define some basic notations for quantum mechanics:\n $SP(|\\psi\\rangle, |\\phi\\rangle) \\implies \\langle \\psi |\\phi \\rangle$ is called \u0026ldquo;braket.\u0026rdquo; As one can guess, $\\langle \\psi |$ is called \u0026ldquo;bra,\u0026rdquo; and it corresponds to a row vector. As one can guess, $\\langle \\psi |$ is called \u0026ldquo;bra,\u0026rdquo; and it corresponds to a row vector. (And of course $|\\phi \\rangle$ corresponds to a column vector.) \u0026ldquo;Ket\u0026rdquo; $|\\psi \\rangle \\in \\mathcal{V}$ maps to \u0026ldquo;bra\u0026rdquo; $\\langle \\psi | \\in \\mathcal{V}^*$ in dual space Scalar product is anti-linear in the first argument: $a|\\psi\\rangle \\longleftrightarrow a^* \\langle \\psi |$  With this basic notation equipped, let\u0026rsquo;s study a concept called \u0026ldquo;operators\u0026rdquo; in the next chapter.\n2. Operators in quantum mechanics Operators are mathematical objects that allow us to describe physical properties, such as position, momentum, and energy. Let\u0026rsquo;s start by the second postulate of quantum mechanics:\nPostulate II: A physical quantity $\\mathcal{A}$ is described by an operator $\\hat{A}$ acting on the state space space $\\mathcal{V}$, and this operator is an observable.\nIn other words, an operator acts on elements of state space $\\mathcal{V}$, which are kets, and these kets are modified by the operator $\\hat{A}$ in some manner. This can be written is $\\hat{A} |\\psi \\rangle = |\\psi' \\rangle$, meaning that the operator $\\hat{A}$ acts on the ket $| \\psi \\rangle$, which is modified to another ket $|\\psi' \\rangle$. It\u0026rsquo;s important to remember that the operators in quantum mechanics can act on the superposition of different states:\n$$\\hat{A} (a_1 |\\psi_1 \\rangle + a_2 |\\psi_2 \\rangle) = a_1 \\hat{A} |\\psi_1 \\rangle + a_2 \\hat{A} | \\psi_2 \\rangle.$$\nAs can be guessed from the above expression, these operators are called \u0026ldquo;linear operators.\u0026rdquo; Fortunately, in quantum mechanics, we can always work with linear operators, which makes the study of quantum mechanics a lot easier. Similarly to the properties of addition and multiplication of kets we studied earlier, (linear) operators have basic properties:\n Associativity of addition: $\\hat{A} + (\\hat{B} + \\hat{C}) = (\\hat{A} + \\hat{B}) + \\hat{C}$ Commutativity of addition: $\\hat{A} + \\hat{B} = \\hat{B} + \\hat{A}$  Before stating the properties of multiplication of operators, let\u0026rsquo;s start with its definition:\n Multiplication of operators: $(\\hat{A}\\hat{B}) |\\psi\\rangle = \\hat{A} ( \\hat{B} |\\psi \\rangle )$  Above can also be thought of as $\\hat{A}$ acting on the new state, $\\hat{B} |\\psi \\rangle = |\\psi' \\rangle$, i.e. $\\hat{A} |\\psi' \\rangle$. Now we state the properties of multiplication of operators:\n Associativity of multiplication: $\\hat{A} (\\hat{B}\\hat{C}) = (\\hat{A} \\hat{B}) \\hat{C}$ Non-commutativity of multiplication: $\\hat{A} \\hat{B} \\neq \\hat{B} \\hat{A}$  The non-commutativity of multiplication is one of the most important properties of operators in quantum mechanics. Due to this aspect, we also define commutators:\n Commutator: $[\\hat{A}, \\hat{B}] = \\hat{A}\\hat{B} - \\hat{B} \\hat{A}$  The non-commutativity of multiplication of operators, and consequently the notion of commutators play a fundamental role in quantum mechanics. Specifically, two operators that do not commute are associated with properties that cannot be measured simultaneously in a quantum system, such as position and momentum operators.\nNow, we introduce the notion of the adjoint operator. Adjoint operator can be thought of as the dual of the operator introduced above, just like a ket corresponds to a bra in the dual space. We can write this as follows:\n$$|\\psi'\\rangle =\\hat{A}|\\psi \\rangle \\longleftrightarrow \\langle \\psi' | = \\langle \\psi|\\hat{A}^\\dagger.$$\nAdjoint operator is also linear, just like the operator introduced previously. With this notion, we can introduce some particularly important operators in quantum mechanics:\n Hermitian operator: $\\hat{A} = \\hat{A}^\\dagger$ Unitary operator: $\\hat{A}^{-1} = \\hat{A}^\\dagger$  Another important way to write an operator is through \u0026ldquo;outer product.\u0026rdquo; It turns out that outer product is also an operator, which can be seen below:\n$$(|\\phi \\rangle \\langle \\psi | ) |\\chi \\rangle = | \\phi \\rangle ( \\langle \\psi | \\chi \\rangle ) = a|\\phi \\rangle,$$\nwhere we denoted the scalar (inner) product $\\langle \\psi | \\chi \\rangle$ as $a \\in \\mathbb{C}$.\nWe close this chapter with some basic mathematical properties of operators:\n $\\langle \\psi | \\hat{A}^\\dagger | \\rho \\rangle = \\langle \\rho |\\hat{A}|\\psi\\rangle^*$ $(\\hat{A}^\\dagger)^\\dagger = \\hat{A}$ $(a \\hat{A})^\\dagger = a^* \\hat{A}^\\dagger$ $(\\hat{A} + \\hat{B})^\\dagger = \\hat{A}^\\dagger + \\hat{B}^\\dagger$ $(\\hat{A}\\hat{B})^\\dagger = \\hat{B}^\\dagger \\hat{A}^\\dagger$  3. Representations in quantum mechanics Just like choosing convenient basis in Euclidean space leads to simpler notations, in quantum mechanics, if we choose convenient basis, it can simplify mathematical representations as well. We represent state space with an orthonormal basis. Orthonormal basis are mathematically defined as a set $\\{ |u_i\\rangle \\}$ such that $\\langle u_i | u_j \\rangle = \\delta_{ij}$, where $\\delta_{ij} = 1$ if $i = j$, and $0$ otherwise (this is known as the \u0026ldquo;kronecker delta\u0026rdquo; function). Also, every ket in the state space, $|\\psi \\rangle \\in \\mathcal{V}$, can be respresented as a unique linear combination of the set $\\{ |u_i\\rangle \\}$, i.e. $|\\psi \\rangle = \\sum_i c_i |u_i \\rangle$.\nSince we\u0026rsquo;re working with orthonormal basis, it is quite easy to find a specific coefficient as follows:\n$$\\langle u_j | \\psi \\rangle = \\langle u_j | \\left( \\sum_i c_i |u_i \\rangle \\right) = \\sum_i c_i \\langle u_j | u_i \\rangle = \\sum_i c_i \\delta_{ij} = c_j.$$\nIn words, we can say that $\\{ c_i \\}$ are a representation of a ket $|\\psi \\rangle$ in the $\\{ |u_i\\rangle \\}$ basis. An important concept of representation is \u0026ldquo;closure relation\u0026rdquo;:\n$$\\begin{aligned} |\\psi \\rangle \u0026amp;= \\sum_i \\langle u_i | \\psi \\rangle |u_i \\rangle = \\left( \\sum_i |u_i \\rangle \\langle u_i \\right) | \\psi \\rangle \\\\\n\u0026amp;= \\sum_i c_i | u_i\\rangle \\quad \\text{where}\\quad c_i = \\langle u_i | \\psi \\rangle. \\end{aligned}$$\nRecall from Chapter 2 that an operator can be written as an outer product. In that sense, from the above, we can see that $\\sum_i |u_i \\rangle \\langle u_i |$ is an operator (notice that I emphasized this with parentheses) that, given a state $|\\psi\\rangle$, returns the same state $|\\psi \\rangle$. Thus, we can also write $\\sum_i |u_i \\rangle \\langle u_i | = \\mathbb{I}$, where $\\mathbb{I}$ is an identity matrix. This result is sometimes also called the \u0026ldquo;resultion of the identity (in the $\\{|u_i\\rangle \\}$ basis).\u0026rdquo; Similar result holds for a bra $\\langle \\psi | \\in \\mathcal{V}^*$ :\n$$\\begin{aligned} \\langle \\psi | = \\langle \\psi | \\mathbb{I} = \\langle \\psi | \\left( \\sum_i |u_i \\rangle \\langle u_i | \\right) \u0026amp;= \\sum_i \\langle \\psi | u_i \\rangle \\langle u_i | \\\\\n\u0026amp;= \\sum_i c_i^* \\langle u_i | \\quad \\text{where} \\quad c_i^* = \\langle u_i | \\psi \\rangle^* = \\langle \\psi | u_i \\rangle. \\end{aligned}$$\nNow, let\u0026rsquo;s look at how we represent operators. Recall the definition of an operator $\\hat{A} |\\psi\\rangle = |\\psi' \\rangle$. Using the same $\\{ |u_i \\rangle \\}$ basis as before, we can write down both kets as below:\n$$\\begin{aligned} |\\psi\\rangle \u0026amp;= \\sum_i c_i | u_i \\rangle \\quad\\text{for}\\quad c_i = \\langle u_i | \\psi \\rangle \\\\\n|\\psi'\\rangle \u0026amp;= \\sum_i c_i' | u_i \\rangle \\quad\\text{for}\\quad c_i' = \\langle u_i | \\psi' \\rangle. \\end{aligned}$$\nNotice that we can write $c_i'$ in an alternative way as follows:\n$$\\begin{aligned} c_i' \u0026amp;= \\langle u_i | \\psi' \\rangle = \\langle u_i | \\hat{A} | \\psi \\rangle = \\langle u_i | \\hat{A}\\mathbb{I} | \\psi \\rangle \\quad\\text{(recall closure relation)} \\\\ \u0026amp;= \\langle u_i | \\hat{A} \\left( \\sum_j |u_j \\rangle \\langle u_j | \\right) |\\psi\\rangle = \\sum_j \\langle u_i |\\hat{A} |u_j \\rangle \\langle u_j | \\psi \\rangle. \\end{aligned}$$\nUsing this alternative form of $c_i'$, we can write down the ket $|\\psi'\\rangle$ in a different form:\n$$\\begin{aligned} |\\psi'\\rangle \u0026amp;= \\sum_i \\left( \\sum_j \\langle u_i|\\hat{A}|u_j \\rangle \\langle u_j|\\psi\\rangle \\right) |u_i\\rangle \\\\\n\u0026amp;= \\left( \\sum_{ij} |u_i \\rangle \\langle u_i | \\hat{A}| u_j \\rangle \\langle u_j| \\right) |\\psi\\rangle \\\\\n\u0026amp;= \\hat{A} |\\psi\\rangle. \\end{aligned}$$\nTherefore, we see that we can write the operator $\\hat{A}$ as\n$$\\hat{A} = \\left( \\sum_{ij} |u_i \\rangle \\langle u_i | \\hat{A}| u_j \\rangle \\langle u_j| \\right) = \\sum_{ij} A_{ij} |u_i\\rangle \\langle u_j|,$$\nwhere $A_{ij} = \\langle u_i | \\hat{A} | u_j \\rangle \\in \\mathbb{C}$. Therefore, we arrive at a scalar value $A_{ij}$ that represents the operator $\\hat{A}$ in the $\\{ |u_i\\rangle \\}$ basis, just like how $c_i = \\langle u_i | \\psi \\rangle$ represents the ket $|\\psi \\rangle$ in the same basis.\nWith the above, we close this chapter, and thus part 1 of this blog post about basics of quantum mechanics. In the next part, we will study matrix formulation of quantum mechanics, how to change basis, and a particularly import basis called eigenbasis.\n","date":1615593600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1615593600,"objectID":"6f86a21cd64251612948b0ed32b1981d","permalink":"https://jlylekim.github.io/blog/quantum-mechanics-1/","publishdate":"2021-03-13T00:00:00Z","relpermalink":"/blog/quantum-mechanics-1/","section":"blog","summary":"Read more","tags":["quantum computing"],"title":"Basics of Quantum Mechanics 1","type":"blog"},{"authors":["Junhyung Lyle Kim","Jose Antonio Lara Benitez","Mohammad Taha Toghani","Cameron Wolfe","Zhiwei Zhang (alphabetical order)","Anastasios Kyrillidis"],"categories":["semi-definite programming","low-rank factorization","acceleration"],"content":"","date":1559347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559347200,"objectID":"6dc02230960d84731ba351a69f7378ff","permalink":"https://jlylekim.github.io/publication/preprint/acc-mixing-method-2021/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/publication/preprint/acc-mixing-method-2021/","section":"publication","summary":" ","tags":["semi-definite programming","low-rank factorization","acceleration"],"title":"Momentum-inspired low-rank coordinate descent for diagonally constrained SDPs","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://jlylekim.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["**Junhyung Lyle Kim**","Mikael Kuusela"],"categories":["uncertainty quantification","high-energy physics"],"content":"","date":1546819200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546819200,"objectID":"bde7a80fd51c10fce6e62b7eb5b30b0b","permalink":"https://jlylekim.github.io/publication/preprint/undersmoothed-unfolding-2019/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/preprint/undersmoothed-unfolding-2019/","section":"publication","summary":" ","tags":["uncertainty quantification","high-energy physics"],"title":"Undersmoothed Uncertainty Quantification for Unfolding","type":"publication"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://jlylekim.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://jlylekim.github.io/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"}]